# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.42.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChangeClientCredentialsParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'old_client_secret': 'str',
        'new_client_secret': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'old_client_secret': 'oldClientSecret',
        'new_client_secret': 'newClientSecret'
    }

    def __init__(self, client_id=None, old_client_secret=None, new_client_secret=None):  # noqa: E501
        """ChangeClientCredentialsParams - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._old_client_secret = None
        self._new_client_secret = None
        self.discriminator = None

        self.client_id = client_id
        self.old_client_secret = old_client_secret
        self.new_client_secret = new_client_secret

    @property
    def client_id(self):
        """Gets the client_id of this ChangeClientCredentialsParams.  # noqa: E501

        client_id of the client that you want to change the secret for  # noqa: E501

        :return: The client_id of this ChangeClientCredentialsParams.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ChangeClientCredentialsParams.

        client_id of the client that you want to change the secret for  # noqa: E501

        :param client_id: The client_id of this ChangeClientCredentialsParams.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def old_client_secret(self):
        """Gets the old_client_secret of this ChangeClientCredentialsParams.  # noqa: E501

        Old (=current) client_secret  # noqa: E501

        :return: The old_client_secret of this ChangeClientCredentialsParams.  # noqa: E501
        :rtype: str
        """
        return self._old_client_secret

    @old_client_secret.setter
    def old_client_secret(self, old_client_secret):
        """Sets the old_client_secret of this ChangeClientCredentialsParams.

        Old (=current) client_secret  # noqa: E501

        :param old_client_secret: The old_client_secret of this ChangeClientCredentialsParams.  # noqa: E501
        :type: str
        """
        if old_client_secret is None:
            raise ValueError("Invalid value for `old_client_secret`, must not be `None`")  # noqa: E501

        self._old_client_secret = old_client_secret

    @property
    def new_client_secret(self):
        """Gets the new_client_secret of this ChangeClientCredentialsParams.  # noqa: E501

        New client_secret. Required length is 36. Allowed symbols: Digits (0 through 9), lower-case and upper-case letters (A through Z), and the dash symbol (\"-\").  # noqa: E501

        :return: The new_client_secret of this ChangeClientCredentialsParams.  # noqa: E501
        :rtype: str
        """
        return self._new_client_secret

    @new_client_secret.setter
    def new_client_secret(self, new_client_secret):
        """Sets the new_client_secret of this ChangeClientCredentialsParams.

        New client_secret. Required length is 36. Allowed symbols: Digits (0 through 9), lower-case and upper-case letters (A through Z), and the dash symbol (\"-\").  # noqa: E501

        :param new_client_secret: The new_client_secret of this ChangeClientCredentialsParams.  # noqa: E501
        :type: str
        """
        if new_client_secret is None:
            raise ValueError("Invalid value for `new_client_secret`, must not be `None`")  # noqa: E501
        if new_client_secret is not None and not re.search('[a-zA-Z0-9\\-]*', new_client_secret):  # noqa: E501
            raise ValueError("Invalid value for `new_client_secret`, must be a follow pattern or equal to `/[a-zA-Z0-9\\-]*/`")  # noqa: E501

        self._new_client_secret = new_client_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeClientCredentialsParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
