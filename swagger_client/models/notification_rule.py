# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NotificationRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'trigger_event': 'str',
        'params': 'dict(str, str)',
        'callback_handle': 'str',
        'include_details': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'trigger_event': 'triggerEvent',
        'params': 'params',
        'callback_handle': 'callbackHandle',
        'include_details': 'includeDetails'
    }

    def __init__(self, id=None, trigger_event=None, params=None, callback_handle=None, include_details=False):  # noqa: E501
        """NotificationRule - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._trigger_event = None
        self._params = None
        self._callback_handle = None
        self._include_details = None
        self.discriminator = None

        self.id = id
        self.trigger_event = trigger_event
        if params is not None:
            self.params = params
        if callback_handle is not None:
            self.callback_handle = callback_handle
        self.include_details = include_details

    @property
    def id(self):
        """Gets the id of this NotificationRule.  # noqa: E501

        Notification rule identifier  # noqa: E501

        :return: The id of this NotificationRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationRule.

        Notification rule identifier  # noqa: E501

        :param id: The id of this NotificationRule.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def trigger_event(self):
        """Gets the trigger_event of this NotificationRule.  # noqa: E501

        Trigger event type  # noqa: E501

        :return: The trigger_event of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this NotificationRule.

        Trigger event type  # noqa: E501

        :param trigger_event: The trigger_event of this NotificationRule.  # noqa: E501
        :type: str
        """
        if trigger_event is None:
            raise ValueError("Invalid value for `trigger_event`, must not be `None`")  # noqa: E501
        allowed_values = ["NEW_ACCOUNT_BALANCE", "NEW_TRANSACTIONS", "BANK_LOGIN_ERROR", "FOREIGN_MONEY_TRANSFER", "LOW_ACCOUNT_BALANCE", "HIGH_TRANSACTION_AMOUNT", "CATEGORY_CASH_FLOW"]  # noqa: E501
        if trigger_event not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_event` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_event, allowed_values)
            )

        self._trigger_event = trigger_event

    @property
    def params(self):
        """Gets the params of this NotificationRule.  # noqa: E501

        Additional parameters that are specific to the trigger event type. Please refer to the documentation for details.  # noqa: E501

        :return: The params of this NotificationRule.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this NotificationRule.

        Additional parameters that are specific to the trigger event type. Please refer to the documentation for details.  # noqa: E501

        :param params: The params of this NotificationRule.  # noqa: E501
        :type: dict(str, str)
        """

        self._params = params

    @property
    def callback_handle(self):
        """Gets the callback_handle of this NotificationRule.  # noqa: E501

        The string that finAPI includes into the notifications that it sends based on this rule.  # noqa: E501

        :return: The callback_handle of this NotificationRule.  # noqa: E501
        :rtype: str
        """
        return self._callback_handle

    @callback_handle.setter
    def callback_handle(self, callback_handle):
        """Sets the callback_handle of this NotificationRule.

        The string that finAPI includes into the notifications that it sends based on this rule.  # noqa: E501

        :param callback_handle: The callback_handle of this NotificationRule.  # noqa: E501
        :type: str
        """

        self._callback_handle = callback_handle

    @property
    def include_details(self):
        """Gets the include_details of this NotificationRule.  # noqa: E501

        Whether the notification messages that will be send based on this rule contain encrypted detailed data or not  # noqa: E501

        :return: The include_details of this NotificationRule.  # noqa: E501
        :rtype: bool
        """
        return self._include_details

    @include_details.setter
    def include_details(self, include_details):
        """Sets the include_details of this NotificationRule.

        Whether the notification messages that will be send based on this rule contain encrypted detailed data or not  # noqa: E501

        :param include_details: The include_details of this NotificationRule.  # noqa: E501
        :type: bool
        """
        if include_details is None:
            raise ValueError("Invalid value for `include_details`, must not be `None`")  # noqa: E501

        self._include_details = include_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
