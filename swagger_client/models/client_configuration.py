# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.42.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_automatic_batch_update_enabled': 'bool',
        'user_notification_callback_url': 'str',
        'user_synchronization_callback_url': 'str',
        'refresh_tokens_validity_period': 'int',
        'user_access_tokens_validity_period': 'int',
        'client_access_tokens_validity_period': 'int',
        'max_user_login_attempts': 'int',
        'is_user_auto_verification_enabled': 'bool',
        'is_mandator_admin': 'bool',
        'is_web_scraping_enabled': 'bool',
        'available_bank_groups': 'list[str]'
    }

    attribute_map = {
        'is_automatic_batch_update_enabled': 'isAutomaticBatchUpdateEnabled',
        'user_notification_callback_url': 'userNotificationCallbackUrl',
        'user_synchronization_callback_url': 'userSynchronizationCallbackUrl',
        'refresh_tokens_validity_period': 'refreshTokensValidityPeriod',
        'user_access_tokens_validity_period': 'userAccessTokensValidityPeriod',
        'client_access_tokens_validity_period': 'clientAccessTokensValidityPeriod',
        'max_user_login_attempts': 'maxUserLoginAttempts',
        'is_user_auto_verification_enabled': 'isUserAutoVerificationEnabled',
        'is_mandator_admin': 'isMandatorAdmin',
        'is_web_scraping_enabled': 'isWebScrapingEnabled',
        'available_bank_groups': 'availableBankGroups'
    }

    def __init__(self, is_automatic_batch_update_enabled=False, user_notification_callback_url=None, user_synchronization_callback_url=None, refresh_tokens_validity_period=None, user_access_tokens_validity_period=None, client_access_tokens_validity_period=None, max_user_login_attempts=None, is_user_auto_verification_enabled=False, is_mandator_admin=False, is_web_scraping_enabled=False, available_bank_groups=None):  # noqa: E501
        """ClientConfiguration - a model defined in Swagger"""  # noqa: E501

        self._is_automatic_batch_update_enabled = None
        self._user_notification_callback_url = None
        self._user_synchronization_callback_url = None
        self._refresh_tokens_validity_period = None
        self._user_access_tokens_validity_period = None
        self._client_access_tokens_validity_period = None
        self._max_user_login_attempts = None
        self._is_user_auto_verification_enabled = None
        self._is_mandator_admin = None
        self._is_web_scraping_enabled = None
        self._available_bank_groups = None
        self.discriminator = None

        self.is_automatic_batch_update_enabled = is_automatic_batch_update_enabled
        if user_notification_callback_url is not None:
            self.user_notification_callback_url = user_notification_callback_url
        if user_synchronization_callback_url is not None:
            self.user_synchronization_callback_url = user_synchronization_callback_url
        if refresh_tokens_validity_period is not None:
            self.refresh_tokens_validity_period = refresh_tokens_validity_period
        if user_access_tokens_validity_period is not None:
            self.user_access_tokens_validity_period = user_access_tokens_validity_period
        if client_access_tokens_validity_period is not None:
            self.client_access_tokens_validity_period = client_access_tokens_validity_period
        self.max_user_login_attempts = max_user_login_attempts
        self.is_user_auto_verification_enabled = is_user_auto_verification_enabled
        self.is_mandator_admin = is_mandator_admin
        self.is_web_scraping_enabled = is_web_scraping_enabled
        self.available_bank_groups = available_bank_groups

    @property
    def is_automatic_batch_update_enabled(self):
        """Gets the is_automatic_batch_update_enabled of this ClientConfiguration.  # noqa: E501

        Whether finAPI performs a regular automatic update of your users' bank connections. To find out how the automatic batch update is configured for your client, i.e. which bank connections get updated, and at which time and interval, please contact your Sys-Admin. Note that even if the automatic batch update is enabled for your client, individual users can still disable the feature for their own bank connections.  # noqa: E501

        :return: The is_automatic_batch_update_enabled of this ClientConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_automatic_batch_update_enabled

    @is_automatic_batch_update_enabled.setter
    def is_automatic_batch_update_enabled(self, is_automatic_batch_update_enabled):
        """Sets the is_automatic_batch_update_enabled of this ClientConfiguration.

        Whether finAPI performs a regular automatic update of your users' bank connections. To find out how the automatic batch update is configured for your client, i.e. which bank connections get updated, and at which time and interval, please contact your Sys-Admin. Note that even if the automatic batch update is enabled for your client, individual users can still disable the feature for their own bank connections.  # noqa: E501

        :param is_automatic_batch_update_enabled: The is_automatic_batch_update_enabled of this ClientConfiguration.  # noqa: E501
        :type: bool
        """
        if is_automatic_batch_update_enabled is None:
            raise ValueError("Invalid value for `is_automatic_batch_update_enabled`, must not be `None`")  # noqa: E501

        self._is_automatic_batch_update_enabled = is_automatic_batch_update_enabled

    @property
    def user_notification_callback_url(self):
        """Gets the user_notification_callback_url of this ClientConfiguration.  # noqa: E501

        Callback URL to which finAPI sends the notification messages that are triggered from the automatic batch update of the users' bank connections. This field is only relevant if the automatic batch update is enabled for your client. For details about what the notification messages look like, please see the documentation in the 'Notification Rules' section. finAPI will call this URL with HTTP method POST. Note that the response of the call is not processed by finAPI. Also note that while the callback URL may be a non-secured (http) URL on the finAPI sandbox or alpha environment, it MUST be a SSL-secured (https) URL on the finAPI live system.  # noqa: E501

        :return: The user_notification_callback_url of this ClientConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user_notification_callback_url

    @user_notification_callback_url.setter
    def user_notification_callback_url(self, user_notification_callback_url):
        """Sets the user_notification_callback_url of this ClientConfiguration.

        Callback URL to which finAPI sends the notification messages that are triggered from the automatic batch update of the users' bank connections. This field is only relevant if the automatic batch update is enabled for your client. For details about what the notification messages look like, please see the documentation in the 'Notification Rules' section. finAPI will call this URL with HTTP method POST. Note that the response of the call is not processed by finAPI. Also note that while the callback URL may be a non-secured (http) URL on the finAPI sandbox or alpha environment, it MUST be a SSL-secured (https) URL on the finAPI live system.  # noqa: E501

        :param user_notification_callback_url: The user_notification_callback_url of this ClientConfiguration.  # noqa: E501
        :type: str
        """

        self._user_notification_callback_url = user_notification_callback_url

    @property
    def user_synchronization_callback_url(self):
        """Gets the user_synchronization_callback_url of this ClientConfiguration.  # noqa: E501

        Callback URL for user synchronization. This field should be set if you - as a finAPI customer - have multiple clients using finAPI. In such case, all of your clients will share the same user base, making it possible for a user to be created in one client, but then deleted in another. To keep the client-side user data consistent in all clients, you should set a callback URL for each client. finAPI will send a notification to the callback URL of each client whenever a user of your user base gets deleted. Note that finAPI will send a deletion notification to ALL clients, including the one that made the user deletion request to finAPI. So when deleting a user in finAPI, a client should rely on the callback to delete the user on its own side. <p>The notification that finAPI sends to the clients' callback URLs will be a POST request, with this body: <pre>{    \"userId\" : string // contains the identifier of the deleted user    \"event\" : string // this will always be \"DELETED\" }</pre><br/>Note that finAPI does not process the response of this call. Also note that while the callback URL may be a non-secured (http) URL on the finAPI sandbox or alpha environment, it MUST be a SSL-secured (https) URL on the finAPI live system.</p>As long as you have just one client, you can ignore this field and let it be null. However keep in mind that in this case your client will not receive any callback when a user gets deleted - so the deletion of the user on the client-side must not be forgotten. Of course you may still use the callback URL even for just one client, if you want to implement the deletion of the user on the client-side via the callback from finAPI.  # noqa: E501

        :return: The user_synchronization_callback_url of this ClientConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user_synchronization_callback_url

    @user_synchronization_callback_url.setter
    def user_synchronization_callback_url(self, user_synchronization_callback_url):
        """Sets the user_synchronization_callback_url of this ClientConfiguration.

        Callback URL for user synchronization. This field should be set if you - as a finAPI customer - have multiple clients using finAPI. In such case, all of your clients will share the same user base, making it possible for a user to be created in one client, but then deleted in another. To keep the client-side user data consistent in all clients, you should set a callback URL for each client. finAPI will send a notification to the callback URL of each client whenever a user of your user base gets deleted. Note that finAPI will send a deletion notification to ALL clients, including the one that made the user deletion request to finAPI. So when deleting a user in finAPI, a client should rely on the callback to delete the user on its own side. <p>The notification that finAPI sends to the clients' callback URLs will be a POST request, with this body: <pre>{    \"userId\" : string // contains the identifier of the deleted user    \"event\" : string // this will always be \"DELETED\" }</pre><br/>Note that finAPI does not process the response of this call. Also note that while the callback URL may be a non-secured (http) URL on the finAPI sandbox or alpha environment, it MUST be a SSL-secured (https) URL on the finAPI live system.</p>As long as you have just one client, you can ignore this field and let it be null. However keep in mind that in this case your client will not receive any callback when a user gets deleted - so the deletion of the user on the client-side must not be forgotten. Of course you may still use the callback URL even for just one client, if you want to implement the deletion of the user on the client-side via the callback from finAPI.  # noqa: E501

        :param user_synchronization_callback_url: The user_synchronization_callback_url of this ClientConfiguration.  # noqa: E501
        :type: str
        """

        self._user_synchronization_callback_url = user_synchronization_callback_url

    @property
    def refresh_tokens_validity_period(self):
        """Gets the refresh_tokens_validity_period of this ClientConfiguration.  # noqa: E501

        The validity period that newly requested refresh tokens initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation, or when a user gets locked, or when the password is reset for a user).  # noqa: E501

        :return: The refresh_tokens_validity_period of this ClientConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._refresh_tokens_validity_period

    @refresh_tokens_validity_period.setter
    def refresh_tokens_validity_period(self, refresh_tokens_validity_period):
        """Sets the refresh_tokens_validity_period of this ClientConfiguration.

        The validity period that newly requested refresh tokens initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation, or when a user gets locked, or when the password is reset for a user).  # noqa: E501

        :param refresh_tokens_validity_period: The refresh_tokens_validity_period of this ClientConfiguration.  # noqa: E501
        :type: int
        """

        self._refresh_tokens_validity_period = refresh_tokens_validity_period

    @property
    def user_access_tokens_validity_period(self):
        """Gets the user_access_tokens_validity_period of this ClientConfiguration.  # noqa: E501

        The validity period that newly requested access tokens for users initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation , or when a user gets locked, or when the password is reset for a user).  # noqa: E501

        :return: The user_access_tokens_validity_period of this ClientConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._user_access_tokens_validity_period

    @user_access_tokens_validity_period.setter
    def user_access_tokens_validity_period(self, user_access_tokens_validity_period):
        """Sets the user_access_tokens_validity_period of this ClientConfiguration.

        The validity period that newly requested access tokens for users initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation , or when a user gets locked, or when the password is reset for a user).  # noqa: E501

        :param user_access_tokens_validity_period: The user_access_tokens_validity_period of this ClientConfiguration.  # noqa: E501
        :type: int
        """

        self._user_access_tokens_validity_period = user_access_tokens_validity_period

    @property
    def client_access_tokens_validity_period(self):
        """Gets the client_access_tokens_validity_period of this ClientConfiguration.  # noqa: E501

        The validity period that newly requested access tokens for clients initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation).  # noqa: E501

        :return: The client_access_tokens_validity_period of this ClientConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._client_access_tokens_validity_period

    @client_access_tokens_validity_period.setter
    def client_access_tokens_validity_period(self, client_access_tokens_validity_period):
        """Sets the client_access_tokens_validity_period of this ClientConfiguration.

        The validity period that newly requested access tokens for clients initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation).  # noqa: E501

        :param client_access_tokens_validity_period: The client_access_tokens_validity_period of this ClientConfiguration.  # noqa: E501
        :type: int
        """

        self._client_access_tokens_validity_period = client_access_tokens_validity_period

    @property
    def max_user_login_attempts(self):
        """Gets the max_user_login_attempts of this ClientConfiguration.  # noqa: E501

        Number of consecutive failed login attempts of a user into his finAPI account that is allowed before finAPI locks the user's account. When a user's account is locked, finAPI will invalidate all user's tokens and it will deny any service call in the context of this user (i.e. any call to a service using one of the user's authorization tokens, as well as the service for requesting a new token for this user). To unlock a user's account, a new password must be set for the account by the client (see the services /users/requestPasswordChange and /users/executePasswordChange). Once a new password has been set, all services will be available again for this user and the user's failed login attempts counter is reset to 0. The user's failed login attempts counter is also reset whenever a new authorization token has been successfully retrieved, or whenever the user himself changes his password.<br/><br/>Note that when this field has a value of 0, it means that there is no limit for user login attempts, i.e. finAPI will never lock user accounts.  # noqa: E501

        :return: The max_user_login_attempts of this ClientConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_user_login_attempts

    @max_user_login_attempts.setter
    def max_user_login_attempts(self, max_user_login_attempts):
        """Sets the max_user_login_attempts of this ClientConfiguration.

        Number of consecutive failed login attempts of a user into his finAPI account that is allowed before finAPI locks the user's account. When a user's account is locked, finAPI will invalidate all user's tokens and it will deny any service call in the context of this user (i.e. any call to a service using one of the user's authorization tokens, as well as the service for requesting a new token for this user). To unlock a user's account, a new password must be set for the account by the client (see the services /users/requestPasswordChange and /users/executePasswordChange). Once a new password has been set, all services will be available again for this user and the user's failed login attempts counter is reset to 0. The user's failed login attempts counter is also reset whenever a new authorization token has been successfully retrieved, or whenever the user himself changes his password.<br/><br/>Note that when this field has a value of 0, it means that there is no limit for user login attempts, i.e. finAPI will never lock user accounts.  # noqa: E501

        :param max_user_login_attempts: The max_user_login_attempts of this ClientConfiguration.  # noqa: E501
        :type: int
        """
        if max_user_login_attempts is None:
            raise ValueError("Invalid value for `max_user_login_attempts`, must not be `None`")  # noqa: E501

        self._max_user_login_attempts = max_user_login_attempts

    @property
    def is_user_auto_verification_enabled(self):
        """Gets the is_user_auto_verification_enabled of this ClientConfiguration.  # noqa: E501

        Whether users that are created with this client are automatically verified on creation. If this field is set to 'false', then any user that is created with this client must first be verified with the \"Verify a user\" service before he can be authorized. If the field is 'true', then no verification is required by the client and the user can be authorized immediately after creation.  # noqa: E501

        :return: The is_user_auto_verification_enabled of this ClientConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_auto_verification_enabled

    @is_user_auto_verification_enabled.setter
    def is_user_auto_verification_enabled(self, is_user_auto_verification_enabled):
        """Sets the is_user_auto_verification_enabled of this ClientConfiguration.

        Whether users that are created with this client are automatically verified on creation. If this field is set to 'false', then any user that is created with this client must first be verified with the \"Verify a user\" service before he can be authorized. If the field is 'true', then no verification is required by the client and the user can be authorized immediately after creation.  # noqa: E501

        :param is_user_auto_verification_enabled: The is_user_auto_verification_enabled of this ClientConfiguration.  # noqa: E501
        :type: bool
        """
        if is_user_auto_verification_enabled is None:
            raise ValueError("Invalid value for `is_user_auto_verification_enabled`, must not be `None`")  # noqa: E501

        self._is_user_auto_verification_enabled = is_user_auto_verification_enabled

    @property
    def is_mandator_admin(self):
        """Gets the is_mandator_admin of this ClientConfiguration.  # noqa: E501

        Whether this client is a 'Mandator Admin'. Mandator Admins are special clients that can access the 'Mandator Administration' section of finAPI. If you do not yet have credentials for a Mandator Admin, please contact us at support@finapi.io. For further information, please refer to <a href='https://finapi.zendesk.com/hc/en-us/articles/115003661827-Difference-between-app-clients-and-mandator-admin-client'>this article</a> on our Dev Portal.  # noqa: E501

        :return: The is_mandator_admin of this ClientConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandator_admin

    @is_mandator_admin.setter
    def is_mandator_admin(self, is_mandator_admin):
        """Sets the is_mandator_admin of this ClientConfiguration.

        Whether this client is a 'Mandator Admin'. Mandator Admins are special clients that can access the 'Mandator Administration' section of finAPI. If you do not yet have credentials for a Mandator Admin, please contact us at support@finapi.io. For further information, please refer to <a href='https://finapi.zendesk.com/hc/en-us/articles/115003661827-Difference-between-app-clients-and-mandator-admin-client'>this article</a> on our Dev Portal.  # noqa: E501

        :param is_mandator_admin: The is_mandator_admin of this ClientConfiguration.  # noqa: E501
        :type: bool
        """
        if is_mandator_admin is None:
            raise ValueError("Invalid value for `is_mandator_admin`, must not be `None`")  # noqa: E501

        self._is_mandator_admin = is_mandator_admin

    @property
    def is_web_scraping_enabled(self):
        """Gets the is_web_scraping_enabled of this ClientConfiguration.  # noqa: E501

        Whether finAPI is allowed to use web scrapers for data download. If this field is set to 'true', then finAPI might download data from the online banking websites of banks (either in addition to using the FinTS interface, or as the sole data source for the download). If this field is set to 'false', then finAPI will not use any web scrapers and instead download data only from FinTS servers. For banks where no FinTS interface is available, finAPI will not allow any data download at all if web scraping is disabled for your client. Please contact your Sys-Admin if you want to change this setting.  # noqa: E501

        :return: The is_web_scraping_enabled of this ClientConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_web_scraping_enabled

    @is_web_scraping_enabled.setter
    def is_web_scraping_enabled(self, is_web_scraping_enabled):
        """Sets the is_web_scraping_enabled of this ClientConfiguration.

        Whether finAPI is allowed to use web scrapers for data download. If this field is set to 'true', then finAPI might download data from the online banking websites of banks (either in addition to using the FinTS interface, or as the sole data source for the download). If this field is set to 'false', then finAPI will not use any web scrapers and instead download data only from FinTS servers. For banks where no FinTS interface is available, finAPI will not allow any data download at all if web scraping is disabled for your client. Please contact your Sys-Admin if you want to change this setting.  # noqa: E501

        :param is_web_scraping_enabled: The is_web_scraping_enabled of this ClientConfiguration.  # noqa: E501
        :type: bool
        """
        if is_web_scraping_enabled is None:
            raise ValueError("Invalid value for `is_web_scraping_enabled`, must not be `None`")  # noqa: E501

        self._is_web_scraping_enabled = is_web_scraping_enabled

    @property
    def available_bank_groups(self):
        """Gets the available_bank_groups of this ClientConfiguration.  # noqa: E501

        List of bank groups that are available to this client. A bank group is a collection of all banks that are located in a certain country, and is defined by the country's ISO 3166 ALPHA-2 code (see also field 'location' of Bank resource). If you want to extend or limit the available bank groups for your client, please contact your Sys-Admin.<br/><br/>Note: There is no bank group for international institutes (i.e. institutes that are not bound to any specific country). Instead, those institutes are always available. If this list is empty, it means that ONLY international institutes are available.  # noqa: E501

        :return: The available_bank_groups of this ClientConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_bank_groups

    @available_bank_groups.setter
    def available_bank_groups(self, available_bank_groups):
        """Sets the available_bank_groups of this ClientConfiguration.

        List of bank groups that are available to this client. A bank group is a collection of all banks that are located in a certain country, and is defined by the country's ISO 3166 ALPHA-2 code (see also field 'location' of Bank resource). If you want to extend or limit the available bank groups for your client, please contact your Sys-Admin.<br/><br/>Note: There is no bank group for international institutes (i.e. institutes that are not bound to any specific country). Instead, those institutes are always available. If this list is empty, it means that ONLY international institutes are available.  # noqa: E501

        :param available_bank_groups: The available_bank_groups of this ClientConfiguration.  # noqa: E501
        :type: list[str]
        """
        if available_bank_groups is None:
            raise ValueError("Invalid value for `available_bank_groups`, must not be `None`")  # noqa: E501

        self._available_bank_groups = available_bank_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
