# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.42.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MonthlyUserStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'month': 'str',
        'min_bank_connection_count': 'int',
        'max_bank_connection_count': 'int'
    }

    attribute_map = {
        'month': 'month',
        'min_bank_connection_count': 'minBankConnectionCount',
        'max_bank_connection_count': 'maxBankConnectionCount'
    }

    def __init__(self, month=None, min_bank_connection_count=None, max_bank_connection_count=None):  # noqa: E501
        """MonthlyUserStats - a model defined in Swagger"""  # noqa: E501

        self._month = None
        self._min_bank_connection_count = None
        self._max_bank_connection_count = None
        self.discriminator = None

        self.month = month
        self.min_bank_connection_count = min_bank_connection_count
        self.max_bank_connection_count = max_bank_connection_count

    @property
    def month(self):
        """Gets the month of this MonthlyUserStats.  # noqa: E501

        The month that the contained information applies to, in the format 'YYYY-MM'.  # noqa: E501

        :return: The month of this MonthlyUserStats.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this MonthlyUserStats.

        The month that the contained information applies to, in the format 'YYYY-MM'.  # noqa: E501

        :param month: The month of this MonthlyUserStats.  # noqa: E501
        :type: str
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501

        self._month = month

    @property
    def min_bank_connection_count(self):
        """Gets the min_bank_connection_count of this MonthlyUserStats.  # noqa: E501

        Minimum count of bank connections that this user has had at any point during the month.  # noqa: E501

        :return: The min_bank_connection_count of this MonthlyUserStats.  # noqa: E501
        :rtype: int
        """
        return self._min_bank_connection_count

    @min_bank_connection_count.setter
    def min_bank_connection_count(self, min_bank_connection_count):
        """Sets the min_bank_connection_count of this MonthlyUserStats.

        Minimum count of bank connections that this user has had at any point during the month.  # noqa: E501

        :param min_bank_connection_count: The min_bank_connection_count of this MonthlyUserStats.  # noqa: E501
        :type: int
        """
        if min_bank_connection_count is None:
            raise ValueError("Invalid value for `min_bank_connection_count`, must not be `None`")  # noqa: E501

        self._min_bank_connection_count = min_bank_connection_count

    @property
    def max_bank_connection_count(self):
        """Gets the max_bank_connection_count of this MonthlyUserStats.  # noqa: E501

        Maximum count of bank connections that this user has had at any point during the month.  # noqa: E501

        :return: The max_bank_connection_count of this MonthlyUserStats.  # noqa: E501
        :rtype: int
        """
        return self._max_bank_connection_count

    @max_bank_connection_count.setter
    def max_bank_connection_count(self, max_bank_connection_count):
        """Sets the max_bank_connection_count of this MonthlyUserStats.

        Maximum count of bank connections that this user has had at any point during the month.  # noqa: E501

        :param max_bank_connection_count: The max_bank_connection_count of this MonthlyUserStats.  # noqa: E501
        :type: int
        """
        if max_bank_connection_count is None:
            raise ValueError("Invalid value for `max_bank_connection_count`, must not be `None`")  # noqa: E501

        self._max_bank_connection_count = max_bank_connection_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonthlyUserStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
