# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.mock_bank_connection_update import MockBankConnectionUpdate  # noqa: F401,E501


class MockBatchUpdateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mock_bank_connection_updates': 'list[MockBankConnectionUpdate]',
        'trigger_notifications': 'bool'
    }

    attribute_map = {
        'mock_bank_connection_updates': 'mockBankConnectionUpdates',
        'trigger_notifications': 'triggerNotifications'
    }

    def __init__(self, mock_bank_connection_updates=None, trigger_notifications=False):  # noqa: E501
        """MockBatchUpdateParams - a model defined in Swagger"""  # noqa: E501

        self._mock_bank_connection_updates = None
        self._trigger_notifications = None
        self.discriminator = None

        self.mock_bank_connection_updates = mock_bank_connection_updates
        if trigger_notifications is not None:
            self.trigger_notifications = trigger_notifications

    @property
    def mock_bank_connection_updates(self):
        """Gets the mock_bank_connection_updates of this MockBatchUpdateParams.  # noqa: E501

        List of mock bank connection updates  # noqa: E501

        :return: The mock_bank_connection_updates of this MockBatchUpdateParams.  # noqa: E501
        :rtype: list[MockBankConnectionUpdate]
        """
        return self._mock_bank_connection_updates

    @mock_bank_connection_updates.setter
    def mock_bank_connection_updates(self, mock_bank_connection_updates):
        """Sets the mock_bank_connection_updates of this MockBatchUpdateParams.

        List of mock bank connection updates  # noqa: E501

        :param mock_bank_connection_updates: The mock_bank_connection_updates of this MockBatchUpdateParams.  # noqa: E501
        :type: list[MockBankConnectionUpdate]
        """
        if mock_bank_connection_updates is None:
            raise ValueError("Invalid value for `mock_bank_connection_updates`, must not be `None`")  # noqa: E501

        self._mock_bank_connection_updates = mock_bank_connection_updates

    @property
    def trigger_notifications(self):
        """Gets the trigger_notifications of this MockBatchUpdateParams.  # noqa: E501

        Whether this call should trigger the dispatching of notifications. Default is 'false'.  # noqa: E501

        :return: The trigger_notifications of this MockBatchUpdateParams.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_notifications

    @trigger_notifications.setter
    def trigger_notifications(self, trigger_notifications):
        """Sets the trigger_notifications of this MockBatchUpdateParams.

        Whether this call should trigger the dispatching of notifications. Default is 'false'.  # noqa: E501

        :param trigger_notifications: The trigger_notifications of this MockBatchUpdateParams.  # noqa: E501
        :type: bool
        """

        self._trigger_notifications = trigger_notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MockBatchUpdateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
