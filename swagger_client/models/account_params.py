# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'account_type_id': 'int',
        'is_new': 'bool'
    }

    attribute_map = {
        'account_name': 'accountName',
        'account_type_id': 'accountTypeId',
        'is_new': 'isNew'
    }

    def __init__(self, account_name=None, account_type_id=None, is_new=False):  # noqa: E501
        """AccountParams - a model defined in Swagger"""  # noqa: E501

        self._account_name = None
        self._account_type_id = None
        self._is_new = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if account_type_id is not None:
            self.account_type_id = account_type_id
        if is_new is not None:
            self.is_new = is_new

    @property
    def account_name(self):
        """Gets the account_name of this AccountParams.  # noqa: E501

        Account name. Maximum length is 512.  # noqa: E501

        :return: The account_name of this AccountParams.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountParams.

        Account name. Maximum length is 512.  # noqa: E501

        :param account_name: The account_name of this AccountParams.  # noqa: E501
        :type: str
        """
        if account_name is not None and not re.search('[A-Za-z0-9¡-ʯ &\\(\\)\\{\\}\\[\\]\\.:,;\\?!\\+\\-_\\$@#~`\\^€]*', account_name):  # noqa: E501
            raise ValueError("Invalid value for `account_name`, must be a follow pattern or equal to `/[A-Za-z0-9¡-ʯ &\\(\\)\\{\\}\\[\\]\\.:,;\\?!\\+\\-_\\$@#~`\\^€]*/`")  # noqa: E501

        self._account_name = account_name

    @property
    def account_type_id(self):
        """Gets the account_type_id of this AccountParams.  # noqa: E501

        Identifier of account type.<br/><br/>1 = Checking,<br/>2 = Savings,<br/>3 = CreditCard,<br/>4 = Security,<br/>5 = Loan,<br/>6 = Pocket (DEPRECATED; will not be returned for any account unless this type has explicitly been set via PATCH),<br/>7 = Membership,<br/>8 = Bausparen<br/><br/>  # noqa: E501

        :return: The account_type_id of this AccountParams.  # noqa: E501
        :rtype: int
        """
        return self._account_type_id

    @account_type_id.setter
    def account_type_id(self, account_type_id):
        """Sets the account_type_id of this AccountParams.

        Identifier of account type.<br/><br/>1 = Checking,<br/>2 = Savings,<br/>3 = CreditCard,<br/>4 = Security,<br/>5 = Loan,<br/>6 = Pocket (DEPRECATED; will not be returned for any account unless this type has explicitly been set via PATCH),<br/>7 = Membership,<br/>8 = Bausparen<br/><br/>  # noqa: E501

        :param account_type_id: The account_type_id of this AccountParams.  # noqa: E501
        :type: int
        """
        if account_type_id is not None and account_type_id > 7:  # noqa: E501
            raise ValueError("Invalid value for `account_type_id`, must be a value less than or equal to `7`")  # noqa: E501
        if account_type_id is not None and account_type_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `account_type_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._account_type_id = account_type_id

    @property
    def is_new(self):
        """Gets the is_new of this AccountParams.  # noqa: E501

        Whether this account should be flagged as 'new' or not. Any newly imported account will have this flag initially set to true, and remain so until you set it to false (see PATCH /accounts/<id>). How you use this field is up to your interpretation, however it is recommended to set the flag to false for all accounts right after the initial import of the bank connection. This way, you will be able recognize accounts that get newly imported during a later update of the bank connection, by checking for any accounts with the flag set to true after every update of the bank connection.  # noqa: E501

        :return: The is_new of this AccountParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this AccountParams.

        Whether this account should be flagged as 'new' or not. Any newly imported account will have this flag initially set to true, and remain so until you set it to false (see PATCH /accounts/<id>). How you use this field is up to your interpretation, however it is recommended to set the flag to false for all accounts right after the initial import of the bank connection. This way, you will be able recognize accounts that get newly imported during a later update of the bank connection, by checking for any accounts with the flag set to true after every update of the bank connection.  # noqa: E501

        :param is_new: The is_new of this AccountParams.  # noqa: E501
        :type: bool
        """

        self._is_new = is_new

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
