# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.single_direct_debit_data import SingleDirectDebitData  # noqa: F401,E501


class RequestSepaDirectDebitParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'banking_pin': 'str',
        'two_step_procedure_id': 'str',
        'direct_debit_type': 'str',
        'sequence_type': 'str',
        'execution_date': 'str',
        'direct_debits': 'list[SingleDirectDebitData]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'banking_pin': 'bankingPin',
        'two_step_procedure_id': 'twoStepProcedureId',
        'direct_debit_type': 'directDebitType',
        'sequence_type': 'sequenceType',
        'execution_date': 'executionDate',
        'direct_debits': 'directDebits'
    }

    def __init__(self, account_id=None, banking_pin=None, two_step_procedure_id=None, direct_debit_type=None, sequence_type=None, execution_date=None, direct_debits=None):  # noqa: E501
        """RequestSepaDirectDebitParams - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._banking_pin = None
        self._two_step_procedure_id = None
        self._direct_debit_type = None
        self._sequence_type = None
        self._execution_date = None
        self._direct_debits = None
        self.discriminator = None

        self.account_id = account_id
        if banking_pin is not None:
            self.banking_pin = banking_pin
        if two_step_procedure_id is not None:
            self.two_step_procedure_id = two_step_procedure_id
        self.direct_debit_type = direct_debit_type
        self.sequence_type = sequence_type
        self.execution_date = execution_date
        self.direct_debits = direct_debits

    @property
    def account_id(self):
        """Gets the account_id of this RequestSepaDirectDebitParams.  # noqa: E501

        Identifier of the bank account to which you want to transfer the money.  # noqa: E501

        :return: The account_id of this RequestSepaDirectDebitParams.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RequestSepaDirectDebitParams.

        Identifier of the bank account to which you want to transfer the money.  # noqa: E501

        :param account_id: The account_id of this RequestSepaDirectDebitParams.  # noqa: E501
        :type: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def banking_pin(self):
        """Gets the banking_pin of this RequestSepaDirectDebitParams.  # noqa: E501

        Online banking PIN. If a PIN is stored in the account's bank connection, then this field may remain unset. If the field is set though then it will always be used (even if there is some other PIN stored in the bank connection).  # noqa: E501

        :return: The banking_pin of this RequestSepaDirectDebitParams.  # noqa: E501
        :rtype: str
        """
        return self._banking_pin

    @banking_pin.setter
    def banking_pin(self, banking_pin):
        """Sets the banking_pin of this RequestSepaDirectDebitParams.

        Online banking PIN. If a PIN is stored in the account's bank connection, then this field may remain unset. If the field is set though then it will always be used (even if there is some other PIN stored in the bank connection).  # noqa: E501

        :param banking_pin: The banking_pin of this RequestSepaDirectDebitParams.  # noqa: E501
        :type: str
        """

        self._banking_pin = banking_pin

    @property
    def two_step_procedure_id(self):
        """Gets the two_step_procedure_id of this RequestSepaDirectDebitParams.  # noqa: E501

        The bank-given ID of the two-step-procedure that should be used for the direct debit order. For a list of available two-step-procedures, see the corresponding bank connection (GET /bankConnections). If this field is not set, then the bank connection's default two-step procedure will be used. Note that in this case, when the bank connection has no default two-step procedure set, then the service will return an error (see response messages for details).  # noqa: E501

        :return: The two_step_procedure_id of this RequestSepaDirectDebitParams.  # noqa: E501
        :rtype: str
        """
        return self._two_step_procedure_id

    @two_step_procedure_id.setter
    def two_step_procedure_id(self, two_step_procedure_id):
        """Sets the two_step_procedure_id of this RequestSepaDirectDebitParams.

        The bank-given ID of the two-step-procedure that should be used for the direct debit order. For a list of available two-step-procedures, see the corresponding bank connection (GET /bankConnections). If this field is not set, then the bank connection's default two-step procedure will be used. Note that in this case, when the bank connection has no default two-step procedure set, then the service will return an error (see response messages for details).  # noqa: E501

        :param two_step_procedure_id: The two_step_procedure_id of this RequestSepaDirectDebitParams.  # noqa: E501
        :type: str
        """

        self._two_step_procedure_id = two_step_procedure_id

    @property
    def direct_debit_type(self):
        """Gets the direct_debit_type of this RequestSepaDirectDebitParams.  # noqa: E501

        Type of the direct debit; either <code>BASIC</code> or <code>B2B</code> (Business-To-Business). Please note that an account which supports the basic type must not necessarily support B2B (or vice versa). Check the source account's 'supportedOrders' field to find out which types of direct debit it supports.<br/><br/>  # noqa: E501

        :return: The direct_debit_type of this RequestSepaDirectDebitParams.  # noqa: E501
        :rtype: str
        """
        return self._direct_debit_type

    @direct_debit_type.setter
    def direct_debit_type(self, direct_debit_type):
        """Sets the direct_debit_type of this RequestSepaDirectDebitParams.

        Type of the direct debit; either <code>BASIC</code> or <code>B2B</code> (Business-To-Business). Please note that an account which supports the basic type must not necessarily support B2B (or vice versa). Check the source account's 'supportedOrders' field to find out which types of direct debit it supports.<br/><br/>  # noqa: E501

        :param direct_debit_type: The direct_debit_type of this RequestSepaDirectDebitParams.  # noqa: E501
        :type: str
        """
        if direct_debit_type is None:
            raise ValueError("Invalid value for `direct_debit_type`, must not be `None`")  # noqa: E501
        allowed_values = ["B2B", "BASIC"]  # noqa: E501
        if direct_debit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `direct_debit_type` ({0}), must be one of {1}"  # noqa: E501
                .format(direct_debit_type, allowed_values)
            )

        self._direct_debit_type = direct_debit_type

    @property
    def sequence_type(self):
        """Gets the sequence_type of this RequestSepaDirectDebitParams.  # noqa: E501

        Sequence type of the direct debit. Possible values:<br/><br/>&bull; <code>OOFF</code> - means that this is a one-time direct debit order<br/>&bull; <code>FRST</code> - means that this is the first in a row of multiple direct debit orders<br/>&bull; <code>RCUR</code> - means that this is one (but not the first or final) within a row of multiple direct debit orders<br/>&bull; <code>FNAL</code> - means that this is the final in a row of multiple direct debit orders<br/><br/>  # noqa: E501

        :return: The sequence_type of this RequestSepaDirectDebitParams.  # noqa: E501
        :rtype: str
        """
        return self._sequence_type

    @sequence_type.setter
    def sequence_type(self, sequence_type):
        """Sets the sequence_type of this RequestSepaDirectDebitParams.

        Sequence type of the direct debit. Possible values:<br/><br/>&bull; <code>OOFF</code> - means that this is a one-time direct debit order<br/>&bull; <code>FRST</code> - means that this is the first in a row of multiple direct debit orders<br/>&bull; <code>RCUR</code> - means that this is one (but not the first or final) within a row of multiple direct debit orders<br/>&bull; <code>FNAL</code> - means that this is the final in a row of multiple direct debit orders<br/><br/>  # noqa: E501

        :param sequence_type: The sequence_type of this RequestSepaDirectDebitParams.  # noqa: E501
        :type: str
        """
        if sequence_type is None:
            raise ValueError("Invalid value for `sequence_type`, must not be `None`")  # noqa: E501
        allowed_values = ["OOFF", "FRST", "RCUR", "FNAL"]  # noqa: E501
        if sequence_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sequence_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sequence_type, allowed_values)
            )

        self._sequence_type = sequence_type

    @property
    def execution_date(self):
        """Gets the execution_date of this RequestSepaDirectDebitParams.  # noqa: E501

        Execution date for the direct debit(s), in the format 'yyyy-MM-dd'.  # noqa: E501

        :return: The execution_date of this RequestSepaDirectDebitParams.  # noqa: E501
        :rtype: str
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this RequestSepaDirectDebitParams.

        Execution date for the direct debit(s), in the format 'yyyy-MM-dd'.  # noqa: E501

        :param execution_date: The execution_date of this RequestSepaDirectDebitParams.  # noqa: E501
        :type: str
        """
        if execution_date is None:
            raise ValueError("Invalid value for `execution_date`, must not be `None`")  # noqa: E501

        self._execution_date = execution_date

    @property
    def direct_debits(self):
        """Gets the direct_debits of this RequestSepaDirectDebitParams.  # noqa: E501

        List of the direct debits that you want to execute. Please check the account's 'supportedOrders' field to find out whether you can pass multiple direct debits or just one.  # noqa: E501

        :return: The direct_debits of this RequestSepaDirectDebitParams.  # noqa: E501
        :rtype: list[SingleDirectDebitData]
        """
        return self._direct_debits

    @direct_debits.setter
    def direct_debits(self, direct_debits):
        """Sets the direct_debits of this RequestSepaDirectDebitParams.

        List of the direct debits that you want to execute. Please check the account's 'supportedOrders' field to find out whether you can pass multiple direct debits or just one.  # noqa: E501

        :param direct_debits: The direct_debits of this RequestSepaDirectDebitParams.  # noqa: E501
        :type: list[SingleDirectDebitData]
        """
        if direct_debits is None:
            raise ValueError("Invalid value for `direct_debits`, must not be `None`")  # noqa: E501

        self._direct_debits = direct_debits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestSepaDirectDebitParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
