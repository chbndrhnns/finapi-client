# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.42.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.transaction_data import TransactionData  # noqa: F401,E501


class CategorizationSample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_data': 'list[TransactionData]',
        'category_id': 'int'
    }

    attribute_map = {
        'transaction_data': 'transactionData',
        'category_id': 'categoryId'
    }

    def __init__(self, transaction_data=None, category_id=None):  # noqa: E501
        """CategorizationSample - a model defined in Swagger"""  # noqa: E501

        self._transaction_data = None
        self._category_id = None
        self.discriminator = None

        self.transaction_data = transaction_data
        self.category_id = category_id

    @property
    def transaction_data(self):
        """Gets the transaction_data of this CategorizationSample.  # noqa: E501

        Set of transaction data (at most 1000 transactions at once)  # noqa: E501

        :return: The transaction_data of this CategorizationSample.  # noqa: E501
        :rtype: list[TransactionData]
        """
        return self._transaction_data

    @transaction_data.setter
    def transaction_data(self, transaction_data):
        """Sets the transaction_data of this CategorizationSample.

        Set of transaction data (at most 1000 transactions at once)  # noqa: E501

        :param transaction_data: The transaction_data of this CategorizationSample.  # noqa: E501
        :type: list[TransactionData]
        """
        if transaction_data is None:
            raise ValueError("Invalid value for `transaction_data`, must not be `None`")  # noqa: E501

        self._transaction_data = transaction_data

    @property
    def category_id(self):
        """Gets the category_id of this CategorizationSample.  # noqa: E501

        Category identifier  # noqa: E501

        :return: The category_id of this CategorizationSample.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CategorizationSample.

        Category identifier  # noqa: E501

        :param category_id: The category_id of this CategorizationSample.  # noqa: E501
        :type: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategorizationSample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
