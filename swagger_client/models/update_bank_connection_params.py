# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateBankConnectionParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_connection_id': 'int',
        'banking_pin': 'str',
        'import_new_accounts': 'bool',
        'skip_positions_download': 'bool',
        'challenge_response': 'str'
    }

    attribute_map = {
        'bank_connection_id': 'bankConnectionId',
        'banking_pin': 'bankingPin',
        'import_new_accounts': 'importNewAccounts',
        'skip_positions_download': 'skipPositionsDownload',
        'challenge_response': 'challengeResponse'
    }

    def __init__(self, bank_connection_id=None, banking_pin=None, import_new_accounts=False, skip_positions_download=False, challenge_response=None):  # noqa: E501
        """UpdateBankConnectionParams - a model defined in Swagger"""  # noqa: E501

        self._bank_connection_id = None
        self._banking_pin = None
        self._import_new_accounts = None
        self._skip_positions_download = None
        self._challenge_response = None
        self.discriminator = None

        self.bank_connection_id = bank_connection_id
        if banking_pin is not None:
            self.banking_pin = banking_pin
        if import_new_accounts is not None:
            self.import_new_accounts = import_new_accounts
        if skip_positions_download is not None:
            self.skip_positions_download = skip_positions_download
        if challenge_response is not None:
            self.challenge_response = challenge_response

    @property
    def bank_connection_id(self):
        """Gets the bank_connection_id of this UpdateBankConnectionParams.  # noqa: E501

        Bank connection identifier  # noqa: E501

        :return: The bank_connection_id of this UpdateBankConnectionParams.  # noqa: E501
        :rtype: int
        """
        return self._bank_connection_id

    @bank_connection_id.setter
    def bank_connection_id(self, bank_connection_id):
        """Sets the bank_connection_id of this UpdateBankConnectionParams.

        Bank connection identifier  # noqa: E501

        :param bank_connection_id: The bank_connection_id of this UpdateBankConnectionParams.  # noqa: E501
        :type: int
        """
        if bank_connection_id is None:
            raise ValueError("Invalid value for `bank_connection_id`, must not be `None`")  # noqa: E501

        self._bank_connection_id = bank_connection_id

    @property
    def banking_pin(self):
        """Gets the banking_pin of this UpdateBankConnectionParams.  # noqa: E501

        Online banking PIN. If a PIN is stored in the bank connection, then this field may remain unset. If the field is set though then it will always be used (even if there is some other PIN stored in the bank connection). Any symbols are allowed. Max length: 170.  # noqa: E501

        :return: The banking_pin of this UpdateBankConnectionParams.  # noqa: E501
        :rtype: str
        """
        return self._banking_pin

    @banking_pin.setter
    def banking_pin(self, banking_pin):
        """Sets the banking_pin of this UpdateBankConnectionParams.

        Online banking PIN. If a PIN is stored in the bank connection, then this field may remain unset. If the field is set though then it will always be used (even if there is some other PIN stored in the bank connection). Any symbols are allowed. Max length: 170.  # noqa: E501

        :param banking_pin: The banking_pin of this UpdateBankConnectionParams.  # noqa: E501
        :type: str
        """

        self._banking_pin = banking_pin

    @property
    def import_new_accounts(self):
        """Gets the import_new_accounts of this UpdateBankConnectionParams.  # noqa: E501

        Whether new accounts that have not yet been imported will be imported or not. Default is false. <br/><br/>NOTES:<br/>&bull; For best performance of the bank connection update, you should not enable this flag unless you really expect new accounts to be available in the connection. It is recommended to let your users tell you through your application when they want the service to look for new accounts.<br/>&bull; If you have imported a bank connection using specific <code>accountTypeIds</code> (e.g. <code>1,2</code> to import checking and saving accounts), you would import all other accounts (e.g. security accounts or credit cards) by setting <code>importNewAccounts</code> to <code>true</code>. To avoid importing account types that you are not interested in, make sure this field is undefined or set to false.  # noqa: E501

        :return: The import_new_accounts of this UpdateBankConnectionParams.  # noqa: E501
        :rtype: bool
        """
        return self._import_new_accounts

    @import_new_accounts.setter
    def import_new_accounts(self, import_new_accounts):
        """Sets the import_new_accounts of this UpdateBankConnectionParams.

        Whether new accounts that have not yet been imported will be imported or not. Default is false. <br/><br/>NOTES:<br/>&bull; For best performance of the bank connection update, you should not enable this flag unless you really expect new accounts to be available in the connection. It is recommended to let your users tell you through your application when they want the service to look for new accounts.<br/>&bull; If you have imported a bank connection using specific <code>accountTypeIds</code> (e.g. <code>1,2</code> to import checking and saving accounts), you would import all other accounts (e.g. security accounts or credit cards) by setting <code>importNewAccounts</code> to <code>true</code>. To avoid importing account types that you are not interested in, make sure this field is undefined or set to false.  # noqa: E501

        :param import_new_accounts: The import_new_accounts of this UpdateBankConnectionParams.  # noqa: E501
        :type: bool
        """

        self._import_new_accounts = import_new_accounts

    @property
    def skip_positions_download(self):
        """Gets the skip_positions_download of this UpdateBankConnectionParams.  # noqa: E501

        Whether to skip the download of transactions and securities or not. If set to true, then finAPI will download just the accounts list with the accounts' information (like account name, number, holder, etc), as well as the accounts' balances (if possible), but skip the download of transactions and securities. Default is false.<br/><br/>NOTES:<br/>&bull; If you skip the download of transactions and securities during an import or update, you can still download them on a later update (though you might not get all positions at a later point, because the date range in which the bank servers provide this data is usually limited). However, once finAPI has downloaded the transactions or securities for the first time, you will not be able to go back to skipping the download of transactions and securities! In other words: Once you make your first request with <code>skipPositionsDownload=false</code> for a certain bank connection, you will no longer be able to make a request with <code>skipPositionsDownload=true</code> for that same bank connection.<br/>&bull; If this bank connection is updated via finAPI's automatic batch update, then transactions and security positions <u>will</u> be downloaded in any case!<br/>&bull; For security accounts, skipping the downloading of the securities might result in the account's balance also not being downloaded.<br/><br/><b>This flag is currently not guaranteed to work for non-German banks!</b>  # noqa: E501

        :return: The skip_positions_download of this UpdateBankConnectionParams.  # noqa: E501
        :rtype: bool
        """
        return self._skip_positions_download

    @skip_positions_download.setter
    def skip_positions_download(self, skip_positions_download):
        """Sets the skip_positions_download of this UpdateBankConnectionParams.

        Whether to skip the download of transactions and securities or not. If set to true, then finAPI will download just the accounts list with the accounts' information (like account name, number, holder, etc), as well as the accounts' balances (if possible), but skip the download of transactions and securities. Default is false.<br/><br/>NOTES:<br/>&bull; If you skip the download of transactions and securities during an import or update, you can still download them on a later update (though you might not get all positions at a later point, because the date range in which the bank servers provide this data is usually limited). However, once finAPI has downloaded the transactions or securities for the first time, you will not be able to go back to skipping the download of transactions and securities! In other words: Once you make your first request with <code>skipPositionsDownload=false</code> for a certain bank connection, you will no longer be able to make a request with <code>skipPositionsDownload=true</code> for that same bank connection.<br/>&bull; If this bank connection is updated via finAPI's automatic batch update, then transactions and security positions <u>will</u> be downloaded in any case!<br/>&bull; For security accounts, skipping the downloading of the securities might result in the account's balance also not being downloaded.<br/><br/><b>This flag is currently not guaranteed to work for non-German banks!</b>  # noqa: E501

        :param skip_positions_download: The skip_positions_download of this UpdateBankConnectionParams.  # noqa: E501
        :type: bool
        """

        self._skip_positions_download = skip_positions_download

    @property
    def challenge_response(self):
        """Gets the challenge_response of this UpdateBankConnectionParams.  # noqa: E501

        Challenge response. This field should be set only when the previous attempt of update the bank connection failed with HTTP code 510, i.e. the bank sent a challenge for the user for an additional authentication. In this case, this field must contain the response to the bank's challenge.  # noqa: E501

        :return: The challenge_response of this UpdateBankConnectionParams.  # noqa: E501
        :rtype: str
        """
        return self._challenge_response

    @challenge_response.setter
    def challenge_response(self, challenge_response):
        """Sets the challenge_response of this UpdateBankConnectionParams.

        Challenge response. This field should be set only when the previous attempt of update the bank connection failed with HTTP code 510, i.e. the bank sent a challenge for the user for an additional authentication. In this case, this field must contain the response to the bank's challenge.  # noqa: E501

        :param challenge_response: The challenge_response of this UpdateBankConnectionParams.  # noqa: E501
        :type: str
        """

        self._challenge_response = challenge_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateBankConnectionParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
