# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.bank import Bank  # noqa: F401,E501
from swagger_client.models.two_step_procedure import TwoStepProcedure  # noqa: F401,E501
from swagger_client.models.update_result import UpdateResult  # noqa: F401,E501


class BankConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'bank_id': 'int',
        'bank': 'Bank',
        'name': 'str',
        'banking_user_id': 'str',
        'banking_customer_id': 'str',
        'banking_pin': 'str',
        'type': 'str',
        'update_status': 'str',
        'categorization_status': 'str',
        'last_manual_update': 'UpdateResult',
        'last_auto_update': 'UpdateResult',
        'two_step_procedures': 'list[TwoStepProcedure]',
        'iban_only_money_transfer_supported': 'bool',
        'iban_only_direct_debit_supported': 'bool',
        'collective_money_transfer_supported': 'bool',
        'default_two_step_procedure_id': 'str',
        'account_ids': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'bank_id': 'bankId',
        'bank': 'bank',
        'name': 'name',
        'banking_user_id': 'bankingUserId',
        'banking_customer_id': 'bankingCustomerId',
        'banking_pin': 'bankingPin',
        'type': 'type',
        'update_status': 'updateStatus',
        'categorization_status': 'categorizationStatus',
        'last_manual_update': 'lastManualUpdate',
        'last_auto_update': 'lastAutoUpdate',
        'two_step_procedures': 'twoStepProcedures',
        'iban_only_money_transfer_supported': 'ibanOnlyMoneyTransferSupported',
        'iban_only_direct_debit_supported': 'ibanOnlyDirectDebitSupported',
        'collective_money_transfer_supported': 'collectiveMoneyTransferSupported',
        'default_two_step_procedure_id': 'defaultTwoStepProcedureId',
        'account_ids': 'accountIds'
    }

    def __init__(self, id=None, bank_id=None, bank=None, name=None, banking_user_id=None, banking_customer_id=None, banking_pin=None, type=None, update_status=None, categorization_status=None, last_manual_update=None, last_auto_update=None, two_step_procedures=None, iban_only_money_transfer_supported=False, iban_only_direct_debit_supported=False, collective_money_transfer_supported=False, default_two_step_procedure_id=None, account_ids=None):  # noqa: E501
        """BankConnection - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._bank_id = None
        self._bank = None
        self._name = None
        self._banking_user_id = None
        self._banking_customer_id = None
        self._banking_pin = None
        self._type = None
        self._update_status = None
        self._categorization_status = None
        self._last_manual_update = None
        self._last_auto_update = None
        self._two_step_procedures = None
        self._iban_only_money_transfer_supported = None
        self._iban_only_direct_debit_supported = None
        self._collective_money_transfer_supported = None
        self._default_two_step_procedure_id = None
        self._account_ids = None
        self.discriminator = None

        self.id = id
        self.bank_id = bank_id
        self.bank = bank
        if name is not None:
            self.name = name
        if banking_user_id is not None:
            self.banking_user_id = banking_user_id
        if banking_customer_id is not None:
            self.banking_customer_id = banking_customer_id
        if banking_pin is not None:
            self.banking_pin = banking_pin
        self.type = type
        self.update_status = update_status
        self.categorization_status = categorization_status
        if last_manual_update is not None:
            self.last_manual_update = last_manual_update
        if last_auto_update is not None:
            self.last_auto_update = last_auto_update
        if two_step_procedures is not None:
            self.two_step_procedures = two_step_procedures
        self.iban_only_money_transfer_supported = iban_only_money_transfer_supported
        self.iban_only_direct_debit_supported = iban_only_direct_debit_supported
        self.collective_money_transfer_supported = collective_money_transfer_supported
        if default_two_step_procedure_id is not None:
            self.default_two_step_procedure_id = default_two_step_procedure_id
        self.account_ids = account_ids

    @property
    def id(self):
        """Gets the id of this BankConnection.  # noqa: E501

        Bank connection identifier  # noqa: E501

        :return: The id of this BankConnection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankConnection.

        Bank connection identifier  # noqa: E501

        :param id: The id of this BankConnection.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def bank_id(self):
        """Gets the bank_id of this BankConnection.  # noqa: E501

        Identifier of the bank that this connection belongs to. NOTE: This field is DEPRECATED and will get removed at some point. Please refer to the 'bank' field instead.  # noqa: E501

        :return: The bank_id of this BankConnection.  # noqa: E501
        :rtype: int
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this BankConnection.

        Identifier of the bank that this connection belongs to. NOTE: This field is DEPRECATED and will get removed at some point. Please refer to the 'bank' field instead.  # noqa: E501

        :param bank_id: The bank_id of this BankConnection.  # noqa: E501
        :type: int
        """
        if bank_id is None:
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    @property
    def bank(self):
        """Gets the bank of this BankConnection.  # noqa: E501

        Bank that this connection belongs to  # noqa: E501

        :return: The bank of this BankConnection.  # noqa: E501
        :rtype: Bank
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this BankConnection.

        Bank that this connection belongs to  # noqa: E501

        :param bank: The bank of this BankConnection.  # noqa: E501
        :type: Bank
        """
        if bank is None:
            raise ValueError("Invalid value for `bank`, must not be `None`")  # noqa: E501

        self._bank = bank

    @property
    def name(self):
        """Gets the name of this BankConnection.  # noqa: E501

        Custom name for the bank connection. You can set this field with the 'Edit a bank connection' service, as well as during the initial import of the bank connection. Maximum length is 64.  # noqa: E501

        :return: The name of this BankConnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankConnection.

        Custom name for the bank connection. You can set this field with the 'Edit a bank connection' service, as well as during the initial import of the bank connection. Maximum length is 64.  # noqa: E501

        :param name: The name of this BankConnection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def banking_user_id(self):
        """Gets the banking_user_id of this BankConnection.  # noqa: E501

        Stored online banking user ID credential. This field may be null for the 'demo connection'.  # noqa: E501

        :return: The banking_user_id of this BankConnection.  # noqa: E501
        :rtype: str
        """
        return self._banking_user_id

    @banking_user_id.setter
    def banking_user_id(self, banking_user_id):
        """Sets the banking_user_id of this BankConnection.

        Stored online banking user ID credential. This field may be null for the 'demo connection'.  # noqa: E501

        :param banking_user_id: The banking_user_id of this BankConnection.  # noqa: E501
        :type: str
        """

        self._banking_user_id = banking_user_id

    @property
    def banking_customer_id(self):
        """Gets the banking_customer_id of this BankConnection.  # noqa: E501

        Stored online banking customer ID credential  # noqa: E501

        :return: The banking_customer_id of this BankConnection.  # noqa: E501
        :rtype: str
        """
        return self._banking_customer_id

    @banking_customer_id.setter
    def banking_customer_id(self, banking_customer_id):
        """Sets the banking_customer_id of this BankConnection.

        Stored online banking customer ID credential  # noqa: E501

        :param banking_customer_id: The banking_customer_id of this BankConnection.  # noqa: E501
        :type: str
        """

        self._banking_customer_id = banking_customer_id

    @property
    def banking_pin(self):
        """Gets the banking_pin of this BankConnection.  # noqa: E501

        Stored online banking PIN. Note that each symbol of the PIN is distorted with an 'X' character.  # noqa: E501

        :return: The banking_pin of this BankConnection.  # noqa: E501
        :rtype: str
        """
        return self._banking_pin

    @banking_pin.setter
    def banking_pin(self, banking_pin):
        """Sets the banking_pin of this BankConnection.

        Stored online banking PIN. Note that each symbol of the PIN is distorted with an 'X' character.  # noqa: E501

        :param banking_pin: The banking_pin of this BankConnection.  # noqa: E501
        :type: str
        """

        self._banking_pin = banking_pin

    @property
    def type(self):
        """Gets the type of this BankConnection.  # noqa: E501

        Bank connection type  # noqa: E501

        :return: The type of this BankConnection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankConnection.

        Bank connection type  # noqa: E501

        :param type: The type of this BankConnection.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ONLINE", "DEMO"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_status(self):
        """Gets the update_status of this BankConnection.  # noqa: E501

        Current status of transactions download. The POST /bankConnections/import and POST /bankConnections/<id>/update services will set this flag to IN_PROGRESS before they return. Once the import or update has finished, the status will be changed to READY.  # noqa: E501

        :return: The update_status of this BankConnection.  # noqa: E501
        :rtype: str
        """
        return self._update_status

    @update_status.setter
    def update_status(self, update_status):
        """Sets the update_status of this BankConnection.

        Current status of transactions download. The POST /bankConnections/import and POST /bankConnections/<id>/update services will set this flag to IN_PROGRESS before they return. Once the import or update has finished, the status will be changed to READY.  # noqa: E501

        :param update_status: The update_status of this BankConnection.  # noqa: E501
        :type: str
        """
        if update_status is None:
            raise ValueError("Invalid value for `update_status`, must not be `None`")  # noqa: E501
        allowed_values = ["IN_PROGRESS", "READY"]  # noqa: E501
        if update_status not in allowed_values:
            raise ValueError(
                "Invalid value for `update_status` ({0}), must be one of {1}"  # noqa: E501
                .format(update_status, allowed_values)
            )

        self._update_status = update_status

    @property
    def categorization_status(self):
        """Gets the categorization_status of this BankConnection.  # noqa: E501

        Current status of transactions categorization. The asynchronous download process that is triggered by a call of the POST /bankConnections/import and POST /bankConnections/<id>/update services (and also by finAPI's auto update, if enabled) will set this flag to PENDING once the download has finished and a categorization is scheduled for the imported transactions. A separate categorization thread will then start to categorize the transactions (during this process, the status is IN_PROGRESS). When categorization has finished, the status will be (re-)set to READY. Note that the current categorization status should only be queried after the download has finished, i.e. once the download status has switched from IN_PROGRESS to READY.  # noqa: E501

        :return: The categorization_status of this BankConnection.  # noqa: E501
        :rtype: str
        """
        return self._categorization_status

    @categorization_status.setter
    def categorization_status(self, categorization_status):
        """Sets the categorization_status of this BankConnection.

        Current status of transactions categorization. The asynchronous download process that is triggered by a call of the POST /bankConnections/import and POST /bankConnections/<id>/update services (and also by finAPI's auto update, if enabled) will set this flag to PENDING once the download has finished and a categorization is scheduled for the imported transactions. A separate categorization thread will then start to categorize the transactions (during this process, the status is IN_PROGRESS). When categorization has finished, the status will be (re-)set to READY. Note that the current categorization status should only be queried after the download has finished, i.e. once the download status has switched from IN_PROGRESS to READY.  # noqa: E501

        :param categorization_status: The categorization_status of this BankConnection.  # noqa: E501
        :type: str
        """
        if categorization_status is None:
            raise ValueError("Invalid value for `categorization_status`, must not be `None`")  # noqa: E501
        allowed_values = ["IN_PROGRESS", "PENDING", "READY"]  # noqa: E501
        if categorization_status not in allowed_values:
            raise ValueError(
                "Invalid value for `categorization_status` ({0}), must be one of {1}"  # noqa: E501
                .format(categorization_status, allowed_values)
            )

        self._categorization_status = categorization_status

    @property
    def last_manual_update(self):
        """Gets the last_manual_update of this BankConnection.  # noqa: E501

        Result of the last manual update of this bank connection. If no manual update has ever been done so far, then this field will not be set.  # noqa: E501

        :return: The last_manual_update of this BankConnection.  # noqa: E501
        :rtype: UpdateResult
        """
        return self._last_manual_update

    @last_manual_update.setter
    def last_manual_update(self, last_manual_update):
        """Sets the last_manual_update of this BankConnection.

        Result of the last manual update of this bank connection. If no manual update has ever been done so far, then this field will not be set.  # noqa: E501

        :param last_manual_update: The last_manual_update of this BankConnection.  # noqa: E501
        :type: UpdateResult
        """

        self._last_manual_update = last_manual_update

    @property
    def last_auto_update(self):
        """Gets the last_auto_update of this BankConnection.  # noqa: E501

        Result of the last auto update of this bank connection (ran by finAPI's automatic batch update process). If no auto update has ever been done so far, then this field will not be set.  # noqa: E501

        :return: The last_auto_update of this BankConnection.  # noqa: E501
        :rtype: UpdateResult
        """
        return self._last_auto_update

    @last_auto_update.setter
    def last_auto_update(self, last_auto_update):
        """Sets the last_auto_update of this BankConnection.

        Result of the last auto update of this bank connection (ran by finAPI's automatic batch update process). If no auto update has ever been done so far, then this field will not be set.  # noqa: E501

        :param last_auto_update: The last_auto_update of this BankConnection.  # noqa: E501
        :type: UpdateResult
        """

        self._last_auto_update = last_auto_update

    @property
    def two_step_procedures(self):
        """Gets the two_step_procedures of this BankConnection.  # noqa: E501

        Available two-step-procedures for this bank connection, used for submitting a money transfer or direct debit request (see /accounts/requestSepaMoneyTransfer or /requestSepaDirectDebit). The available two-step-procedures are re-evaluated each time this bank connection is updated (/bankConnections/update). This means that this list may change as a result of an update.  # noqa: E501

        :return: The two_step_procedures of this BankConnection.  # noqa: E501
        :rtype: list[TwoStepProcedure]
        """
        return self._two_step_procedures

    @two_step_procedures.setter
    def two_step_procedures(self, two_step_procedures):
        """Sets the two_step_procedures of this BankConnection.

        Available two-step-procedures for this bank connection, used for submitting a money transfer or direct debit request (see /accounts/requestSepaMoneyTransfer or /requestSepaDirectDebit). The available two-step-procedures are re-evaluated each time this bank connection is updated (/bankConnections/update). This means that this list may change as a result of an update.  # noqa: E501

        :param two_step_procedures: The two_step_procedures of this BankConnection.  # noqa: E501
        :type: list[TwoStepProcedure]
        """

        self._two_step_procedures = two_step_procedures

    @property
    def iban_only_money_transfer_supported(self):
        """Gets the iban_only_money_transfer_supported of this BankConnection.  # noqa: E501

        Whether this bank connection accepts money transfer requests where the recipient's account is defined just by the IBAN (without an additional BIC). This field is re-evaluated each time this bank connection is updated. See also: /accounts/requestSepaMoneyTransfer  # noqa: E501

        :return: The iban_only_money_transfer_supported of this BankConnection.  # noqa: E501
        :rtype: bool
        """
        return self._iban_only_money_transfer_supported

    @iban_only_money_transfer_supported.setter
    def iban_only_money_transfer_supported(self, iban_only_money_transfer_supported):
        """Sets the iban_only_money_transfer_supported of this BankConnection.

        Whether this bank connection accepts money transfer requests where the recipient's account is defined just by the IBAN (without an additional BIC). This field is re-evaluated each time this bank connection is updated. See also: /accounts/requestSepaMoneyTransfer  # noqa: E501

        :param iban_only_money_transfer_supported: The iban_only_money_transfer_supported of this BankConnection.  # noqa: E501
        :type: bool
        """
        if iban_only_money_transfer_supported is None:
            raise ValueError("Invalid value for `iban_only_money_transfer_supported`, must not be `None`")  # noqa: E501

        self._iban_only_money_transfer_supported = iban_only_money_transfer_supported

    @property
    def iban_only_direct_debit_supported(self):
        """Gets the iban_only_direct_debit_supported of this BankConnection.  # noqa: E501

        Whether this bank connection accepts direct debit requests where the debitor's account is defined just by the IBAN (without an additional BIC). This field is re-evaluated each time this bank connection is updated. See also: /accounts/requestSepaDirectDebit  # noqa: E501

        :return: The iban_only_direct_debit_supported of this BankConnection.  # noqa: E501
        :rtype: bool
        """
        return self._iban_only_direct_debit_supported

    @iban_only_direct_debit_supported.setter
    def iban_only_direct_debit_supported(self, iban_only_direct_debit_supported):
        """Sets the iban_only_direct_debit_supported of this BankConnection.

        Whether this bank connection accepts direct debit requests where the debitor's account is defined just by the IBAN (without an additional BIC). This field is re-evaluated each time this bank connection is updated. See also: /accounts/requestSepaDirectDebit  # noqa: E501

        :param iban_only_direct_debit_supported: The iban_only_direct_debit_supported of this BankConnection.  # noqa: E501
        :type: bool
        """
        if iban_only_direct_debit_supported is None:
            raise ValueError("Invalid value for `iban_only_direct_debit_supported`, must not be `None`")  # noqa: E501

        self._iban_only_direct_debit_supported = iban_only_direct_debit_supported

    @property
    def collective_money_transfer_supported(self):
        """Gets the collective_money_transfer_supported of this BankConnection.  # noqa: E501

        <b>DEPRECATED! DO NOT USE THIS FIELD, AS IT IS UNRELIABLE. INSTEAD, REFER TO THE 'supportedOrders' FIELD IN THE ACCOUNT RESOURCE.</b><br/><br/>Whether this bank connection supports submitting collective money transfers. This field is re-evaluated each time this bank connection is updated. See also: /accounts/requestSepaMoneyTransfer  # noqa: E501

        :return: The collective_money_transfer_supported of this BankConnection.  # noqa: E501
        :rtype: bool
        """
        return self._collective_money_transfer_supported

    @collective_money_transfer_supported.setter
    def collective_money_transfer_supported(self, collective_money_transfer_supported):
        """Sets the collective_money_transfer_supported of this BankConnection.

        <b>DEPRECATED! DO NOT USE THIS FIELD, AS IT IS UNRELIABLE. INSTEAD, REFER TO THE 'supportedOrders' FIELD IN THE ACCOUNT RESOURCE.</b><br/><br/>Whether this bank connection supports submitting collective money transfers. This field is re-evaluated each time this bank connection is updated. See also: /accounts/requestSepaMoneyTransfer  # noqa: E501

        :param collective_money_transfer_supported: The collective_money_transfer_supported of this BankConnection.  # noqa: E501
        :type: bool
        """
        if collective_money_transfer_supported is None:
            raise ValueError("Invalid value for `collective_money_transfer_supported`, must not be `None`")  # noqa: E501

        self._collective_money_transfer_supported = collective_money_transfer_supported

    @property
    def default_two_step_procedure_id(self):
        """Gets the default_two_step_procedure_id of this BankConnection.  # noqa: E501

        The default two-step-procedure. Must match one of the available 'procedureId's from the 'twoStepProcedures' list. When this field is set, you can execute two-step-procedures (accounts/requestSepaMoneyTransfer or /requestSepaDirectDebit) without having to explicitly set a procedure. finAPI will use the default procedure in such cases. Note that the list of available procedures of a bank connection may change as a result of an update of the connection, and if this field references a procedure that is no longer available after an update, finAPI will automatically clear the default procedure (set it to null).  # noqa: E501

        :return: The default_two_step_procedure_id of this BankConnection.  # noqa: E501
        :rtype: str
        """
        return self._default_two_step_procedure_id

    @default_two_step_procedure_id.setter
    def default_two_step_procedure_id(self, default_two_step_procedure_id):
        """Sets the default_two_step_procedure_id of this BankConnection.

        The default two-step-procedure. Must match one of the available 'procedureId's from the 'twoStepProcedures' list. When this field is set, you can execute two-step-procedures (accounts/requestSepaMoneyTransfer or /requestSepaDirectDebit) without having to explicitly set a procedure. finAPI will use the default procedure in such cases. Note that the list of available procedures of a bank connection may change as a result of an update of the connection, and if this field references a procedure that is no longer available after an update, finAPI will automatically clear the default procedure (set it to null).  # noqa: E501

        :param default_two_step_procedure_id: The default_two_step_procedure_id of this BankConnection.  # noqa: E501
        :type: str
        """

        self._default_two_step_procedure_id = default_two_step_procedure_id

    @property
    def account_ids(self):
        """Gets the account_ids of this BankConnection.  # noqa: E501

        Identifiers of the accounts that belong to this bank connection  # noqa: E501

        :return: The account_ids of this BankConnection.  # noqa: E501
        :rtype: list[int]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this BankConnection.

        Identifiers of the accounts that belong to this bank connection  # noqa: E501

        :param account_ids: The account_ids of this BankConnection.  # noqa: E501
        :type: list[int]
        """
        if account_ids is None:
            raise ValueError("Invalid value for `account_ids`, must not be `None`")  # noqa: E501

        self._account_ids = account_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
