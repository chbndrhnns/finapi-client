# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateTransactionsParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_new': 'bool',
        'is_potential_duplicate': 'bool',
        'category_id': 'int',
        'train_categorization': 'bool',
        'label_ids': 'list[int]'
    }

    attribute_map = {
        'is_new': 'isNew',
        'is_potential_duplicate': 'isPotentialDuplicate',
        'category_id': 'categoryId',
        'train_categorization': 'trainCategorization',
        'label_ids': 'labelIds'
    }

    def __init__(self, is_new=False, is_potential_duplicate=False, category_id=None, train_categorization=False, label_ids=None):  # noqa: E501
        """UpdateTransactionsParams - a model defined in Swagger"""  # noqa: E501

        self._is_new = None
        self._is_potential_duplicate = None
        self._category_id = None
        self._train_categorization = None
        self._label_ids = None
        self.discriminator = None

        if is_new is not None:
            self.is_new = is_new
        if is_potential_duplicate is not None:
            self.is_potential_duplicate = is_potential_duplicate
        if category_id is not None:
            self.category_id = category_id
        if train_categorization is not None:
            self.train_categorization = train_categorization
        if label_ids is not None:
            self.label_ids = label_ids

    @property
    def is_new(self):
        """Gets the is_new of this UpdateTransactionsParams.  # noqa: E501

        Whether this transactions should be flagged as 'new' or not. Any newly imported transaction will have this flag initially set to true. How you use this field is up to your interpretation. For example, you might want to set it to false once a user has clicked on/seen the transaction.  # noqa: E501

        :return: The is_new of this UpdateTransactionsParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this UpdateTransactionsParams.

        Whether this transactions should be flagged as 'new' or not. Any newly imported transaction will have this flag initially set to true. How you use this field is up to your interpretation. For example, you might want to set it to false once a user has clicked on/seen the transaction.  # noqa: E501

        :param is_new: The is_new of this UpdateTransactionsParams.  # noqa: E501
        :type: bool
        """

        self._is_new = is_new

    @property
    def is_potential_duplicate(self):
        """Gets the is_potential_duplicate of this UpdateTransactionsParams.  # noqa: E501

        You can set this field only to 'false'. finAPI marks transactions as a potential duplicates  when its internal duplicate detection algorithm is signaling so. Transactions that are flagged as duplicates can be deleted by the user. To prevent the user from deleting original transactions, which might lead to incorrect balances, it is not possible to manually set this flag to 'true'.  # noqa: E501

        :return: The is_potential_duplicate of this UpdateTransactionsParams.  # noqa: E501
        :rtype: bool
        """
        return self._is_potential_duplicate

    @is_potential_duplicate.setter
    def is_potential_duplicate(self, is_potential_duplicate):
        """Sets the is_potential_duplicate of this UpdateTransactionsParams.

        You can set this field only to 'false'. finAPI marks transactions as a potential duplicates  when its internal duplicate detection algorithm is signaling so. Transactions that are flagged as duplicates can be deleted by the user. To prevent the user from deleting original transactions, which might lead to incorrect balances, it is not possible to manually set this flag to 'true'.  # noqa: E501

        :param is_potential_duplicate: The is_potential_duplicate of this UpdateTransactionsParams.  # noqa: E501
        :type: bool
        """

        self._is_potential_duplicate = is_potential_duplicate

    @property
    def category_id(self):
        """Gets the category_id of this UpdateTransactionsParams.  # noqa: E501

        Identifier of the new category to apply to the transaction. When updating the transaction's category, the category's fields 'id', 'name', 'parentId', 'parentName', and 'isCustom' will all get updated. To clear the category for the transaction, the categoryId field must be passed with value 0.  # noqa: E501

        :return: The category_id of this UpdateTransactionsParams.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this UpdateTransactionsParams.

        Identifier of the new category to apply to the transaction. When updating the transaction's category, the category's fields 'id', 'name', 'parentId', 'parentName', and 'isCustom' will all get updated. To clear the category for the transaction, the categoryId field must be passed with value 0.  # noqa: E501

        :param category_id: The category_id of this UpdateTransactionsParams.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def train_categorization(self):
        """Gets the train_categorization of this UpdateTransactionsParams.  # noqa: E501

        This field is only regarded when the field 'categoryId' is set. It controls whether finAPI's categorization system should learn from the given categorization(s). If set to 'true', then the user's categorization rules will be updated so that similar transactions will get categorized accordingly in future. If set to 'false', then the service will simply change the category of the given transaction(s), without updating the user's categorization rules. The field defaults to 'true' if not specified.  # noqa: E501

        :return: The train_categorization of this UpdateTransactionsParams.  # noqa: E501
        :rtype: bool
        """
        return self._train_categorization

    @train_categorization.setter
    def train_categorization(self, train_categorization):
        """Sets the train_categorization of this UpdateTransactionsParams.

        This field is only regarded when the field 'categoryId' is set. It controls whether finAPI's categorization system should learn from the given categorization(s). If set to 'true', then the user's categorization rules will be updated so that similar transactions will get categorized accordingly in future. If set to 'false', then the service will simply change the category of the given transaction(s), without updating the user's categorization rules. The field defaults to 'true' if not specified.  # noqa: E501

        :param train_categorization: The train_categorization of this UpdateTransactionsParams.  # noqa: E501
        :type: bool
        """

        self._train_categorization = train_categorization

    @property
    def label_ids(self):
        """Gets the label_ids of this UpdateTransactionsParams.  # noqa: E501

        Identifiers of labels to apply to the transaction. To clear transactions' labels, pass an empty array of identifiers: '[]'  # noqa: E501

        :return: The label_ids of this UpdateTransactionsParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this UpdateTransactionsParams.

        Identifiers of labels to apply to the transaction. To clear transactions' labels, pass an empty array of identifiers: '[]'  # noqa: E501

        :param label_ids: The label_ids of this UpdateTransactionsParams.  # noqa: E501
        :type: list[int]
        """

        self._label_ids = label_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTransactionsParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
