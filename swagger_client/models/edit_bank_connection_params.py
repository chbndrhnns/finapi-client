# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EditBankConnectionParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'banking_user_id': 'str',
        'banking_customer_id': 'str',
        'banking_pin': 'str',
        'default_two_step_procedure_id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'banking_user_id': 'bankingUserId',
        'banking_customer_id': 'bankingCustomerId',
        'banking_pin': 'bankingPin',
        'default_two_step_procedure_id': 'defaultTwoStepProcedureId',
        'name': 'name'
    }

    def __init__(self, banking_user_id=None, banking_customer_id=None, banking_pin=None, default_two_step_procedure_id=None, name=None):  # noqa: E501
        """EditBankConnectionParams - a model defined in Swagger"""  # noqa: E501

        self._banking_user_id = None
        self._banking_customer_id = None
        self._banking_pin = None
        self._default_two_step_procedure_id = None
        self._name = None
        self.discriminator = None

        if banking_user_id is not None:
            self.banking_user_id = banking_user_id
        if banking_customer_id is not None:
            self.banking_customer_id = banking_customer_id
        if banking_pin is not None:
            self.banking_pin = banking_pin
        if default_two_step_procedure_id is not None:
            self.default_two_step_procedure_id = default_two_step_procedure_id
        if name is not None:
            self.name = name

    @property
    def banking_user_id(self):
        """Gets the banking_user_id of this EditBankConnectionParams.  # noqa: E501

        New online banking user ID. If you do not want to change the current user ID let this field remain unset. Note that you cannot clear the current user ID, i.e. a bank connection must always have a user ID (except for when it is a 'demo connection'). Max length: 64.  # noqa: E501

        :return: The banking_user_id of this EditBankConnectionParams.  # noqa: E501
        :rtype: str
        """
        return self._banking_user_id

    @banking_user_id.setter
    def banking_user_id(self, banking_user_id):
        """Sets the banking_user_id of this EditBankConnectionParams.

        New online banking user ID. If you do not want to change the current user ID let this field remain unset. Note that you cannot clear the current user ID, i.e. a bank connection must always have a user ID (except for when it is a 'demo connection'). Max length: 64.  # noqa: E501

        :param banking_user_id: The banking_user_id of this EditBankConnectionParams.  # noqa: E501
        :type: str
        """

        self._banking_user_id = banking_user_id

    @property
    def banking_customer_id(self):
        """Gets the banking_customer_id of this EditBankConnectionParams.  # noqa: E501

        New online banking customer ID. If you do not want to change the current customer ID let this field remain unset. If you want to clear the current customer ID, set the field's value to an empty string (\"\"). Max length: 64.  # noqa: E501

        :return: The banking_customer_id of this EditBankConnectionParams.  # noqa: E501
        :rtype: str
        """
        return self._banking_customer_id

    @banking_customer_id.setter
    def banking_customer_id(self, banking_customer_id):
        """Sets the banking_customer_id of this EditBankConnectionParams.

        New online banking customer ID. If you do not want to change the current customer ID let this field remain unset. If you want to clear the current customer ID, set the field's value to an empty string (\"\"). Max length: 64.  # noqa: E501

        :param banking_customer_id: The banking_customer_id of this EditBankConnectionParams.  # noqa: E501
        :type: str
        """

        self._banking_customer_id = banking_customer_id

    @property
    def banking_pin(self):
        """Gets the banking_pin of this EditBankConnectionParams.  # noqa: E501

        New online banking PIN. If you do not want to change the current PIN let this field remain unset. If you want to clear the current PIN, set the field's value to an empty string (\"\").<br/><br/>NOTE: Before you set this field, please regard the 'pinsAreVolatile' flag of this connection's bank. Any symbols are allowed. Max length: 170.  # noqa: E501

        :return: The banking_pin of this EditBankConnectionParams.  # noqa: E501
        :rtype: str
        """
        return self._banking_pin

    @banking_pin.setter
    def banking_pin(self, banking_pin):
        """Sets the banking_pin of this EditBankConnectionParams.

        New online banking PIN. If you do not want to change the current PIN let this field remain unset. If you want to clear the current PIN, set the field's value to an empty string (\"\").<br/><br/>NOTE: Before you set this field, please regard the 'pinsAreVolatile' flag of this connection's bank. Any symbols are allowed. Max length: 170.  # noqa: E501

        :param banking_pin: The banking_pin of this EditBankConnectionParams.  # noqa: E501
        :type: str
        """

        self._banking_pin = banking_pin

    @property
    def default_two_step_procedure_id(self):
        """Gets the default_two_step_procedure_id of this EditBankConnectionParams.  # noqa: E501

        New default two-step-procedure. Must match the 'procedureId' of one of the procedures that are listed in the bank connection. If you do not want to change this field let it remain unset. If you want to clear the current default two-step-procedure, set the field's value to an empty string (\"\").  # noqa: E501

        :return: The default_two_step_procedure_id of this EditBankConnectionParams.  # noqa: E501
        :rtype: str
        """
        return self._default_two_step_procedure_id

    @default_two_step_procedure_id.setter
    def default_two_step_procedure_id(self, default_two_step_procedure_id):
        """Sets the default_two_step_procedure_id of this EditBankConnectionParams.

        New default two-step-procedure. Must match the 'procedureId' of one of the procedures that are listed in the bank connection. If you do not want to change this field let it remain unset. If you want to clear the current default two-step-procedure, set the field's value to an empty string (\"\").  # noqa: E501

        :param default_two_step_procedure_id: The default_two_step_procedure_id of this EditBankConnectionParams.  # noqa: E501
        :type: str
        """

        self._default_two_step_procedure_id = default_two_step_procedure_id

    @property
    def name(self):
        """Gets the name of this EditBankConnectionParams.  # noqa: E501

        New name for the bank connection. Maximum length is 64. If you do not want to change the current name let this field remain unset. If you want to clear the current name, set the field's value to an empty string (\"\").  # noqa: E501

        :return: The name of this EditBankConnectionParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditBankConnectionParams.

        New name for the bank connection. Maximum length is 64. If you do not want to change the current name let this field remain unset. If you want to clear the current name, set the field's value to an empty string (\"\").  # noqa: E501

        :param name: The name of this EditBankConnectionParams.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditBankConnectionParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
