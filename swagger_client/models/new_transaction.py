# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.42.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'purpose': 'str',
        'counterpart': 'str',
        'counterpart_iban': 'str',
        'counterpart_blz': 'str',
        'counterpart_bic': 'str',
        'booking_date': 'str',
        'value_date': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'purpose': 'purpose',
        'counterpart': 'counterpart',
        'counterpart_iban': 'counterpartIban',
        'counterpart_blz': 'counterpartBlz',
        'counterpart_bic': 'counterpartBic',
        'booking_date': 'bookingDate',
        'value_date': 'valueDate'
    }

    def __init__(self, amount=None, purpose=None, counterpart=None, counterpart_iban=None, counterpart_blz=None, counterpart_bic=None, booking_date=None, value_date=None):  # noqa: E501
        """NewTransaction - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._purpose = None
        self._counterpart = None
        self._counterpart_iban = None
        self._counterpart_blz = None
        self._counterpart_bic = None
        self._booking_date = None
        self._value_date = None
        self.discriminator = None

        self.amount = amount
        if purpose is not None:
            self.purpose = purpose
        if counterpart is not None:
            self.counterpart = counterpart
        if counterpart_iban is not None:
            self.counterpart_iban = counterpart_iban
        if counterpart_blz is not None:
            self.counterpart_blz = counterpart_blz
        if counterpart_bic is not None:
            self.counterpart_bic = counterpart_bic
        if booking_date is not None:
            self.booking_date = booking_date
        if value_date is not None:
            self.value_date = value_date

    @property
    def amount(self):
        """Gets the amount of this NewTransaction.  # noqa: E501

        Amount. Required.  # noqa: E501

        :return: The amount of this NewTransaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NewTransaction.

        Amount. Required.  # noqa: E501

        :param amount: The amount of this NewTransaction.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def purpose(self):
        """Gets the purpose of this NewTransaction.  # noqa: E501

        Purpose. Any symbols are allowed. Maximum length is 2000. Optional. Default value: null.  # noqa: E501

        :return: The purpose of this NewTransaction.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this NewTransaction.

        Purpose. Any symbols are allowed. Maximum length is 2000. Optional. Default value: null.  # noqa: E501

        :param purpose: The purpose of this NewTransaction.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def counterpart(self):
        """Gets the counterpart of this NewTransaction.  # noqa: E501

        Counterpart. Any symbols are allowed. Maximum length is 80. Optional. Default value: null.  # noqa: E501

        :return: The counterpart of this NewTransaction.  # noqa: E501
        :rtype: str
        """
        return self._counterpart

    @counterpart.setter
    def counterpart(self, counterpart):
        """Sets the counterpart of this NewTransaction.

        Counterpart. Any symbols are allowed. Maximum length is 80. Optional. Default value: null.  # noqa: E501

        :param counterpart: The counterpart of this NewTransaction.  # noqa: E501
        :type: str
        """

        self._counterpart = counterpart

    @property
    def counterpart_iban(self):
        """Gets the counterpart_iban of this NewTransaction.  # noqa: E501

        Counterpart IBAN. Optional. Default value: null.  # noqa: E501

        :return: The counterpart_iban of this NewTransaction.  # noqa: E501
        :rtype: str
        """
        return self._counterpart_iban

    @counterpart_iban.setter
    def counterpart_iban(self, counterpart_iban):
        """Sets the counterpart_iban of this NewTransaction.

        Counterpart IBAN. Optional. Default value: null.  # noqa: E501

        :param counterpart_iban: The counterpart_iban of this NewTransaction.  # noqa: E501
        :type: str
        """

        self._counterpart_iban = counterpart_iban

    @property
    def counterpart_blz(self):
        """Gets the counterpart_blz of this NewTransaction.  # noqa: E501

        Counterpart BLZ. Optional. Default value: null.  # noqa: E501

        :return: The counterpart_blz of this NewTransaction.  # noqa: E501
        :rtype: str
        """
        return self._counterpart_blz

    @counterpart_blz.setter
    def counterpart_blz(self, counterpart_blz):
        """Sets the counterpart_blz of this NewTransaction.

        Counterpart BLZ. Optional. Default value: null.  # noqa: E501

        :param counterpart_blz: The counterpart_blz of this NewTransaction.  # noqa: E501
        :type: str
        """

        self._counterpart_blz = counterpart_blz

    @property
    def counterpart_bic(self):
        """Gets the counterpart_bic of this NewTransaction.  # noqa: E501

        Counterpart BIC. Optional. Default value: null.  # noqa: E501

        :return: The counterpart_bic of this NewTransaction.  # noqa: E501
        :rtype: str
        """
        return self._counterpart_bic

    @counterpart_bic.setter
    def counterpart_bic(self, counterpart_bic):
        """Sets the counterpart_bic of this NewTransaction.

        Counterpart BIC. Optional. Default value: null.  # noqa: E501

        :param counterpart_bic: The counterpart_bic of this NewTransaction.  # noqa: E501
        :type: str
        """

        self._counterpart_bic = counterpart_bic

    @property
    def booking_date(self):
        """Gets the booking_date of this NewTransaction.  # noqa: E501

        Booking date in the format 'yyyy-MM-dd'.<br/><br/>If the date lies back more than 10 days from the booking date of the latest transaction that currently exists in the account, then this transaction will be ignored and not imported. If the date depicts a date in the future, then finAPI will deal with it the same way as it does with real transactions during a real update (see fields 'bankBookingDate' and 'finapiBookingDate' in the Transaction Resource for explanation).<br/><br/>This field is optional, default value is the current date.  # noqa: E501

        :return: The booking_date of this NewTransaction.  # noqa: E501
        :rtype: str
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this NewTransaction.

        Booking date in the format 'yyyy-MM-dd'.<br/><br/>If the date lies back more than 10 days from the booking date of the latest transaction that currently exists in the account, then this transaction will be ignored and not imported. If the date depicts a date in the future, then finAPI will deal with it the same way as it does with real transactions during a real update (see fields 'bankBookingDate' and 'finapiBookingDate' in the Transaction Resource for explanation).<br/><br/>This field is optional, default value is the current date.  # noqa: E501

        :param booking_date: The booking_date of this NewTransaction.  # noqa: E501
        :type: str
        """

        self._booking_date = booking_date

    @property
    def value_date(self):
        """Gets the value_date of this NewTransaction.  # noqa: E501

        Value date in the format 'yyyy-MM-dd'. Optional. Default value: Same as the booking date.  # noqa: E501

        :return: The value_date of this NewTransaction.  # noqa: E501
        :rtype: str
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this NewTransaction.

        Value date in the format 'yyyy-MM-dd'. Optional. Default value: Same as the booking date.  # noqa: E501

        :param value_date: The value_date of this NewTransaction.  # noqa: E501
        :type: str
        """

        self._value_date = value_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
