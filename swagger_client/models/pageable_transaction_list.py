# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.paging import Paging  # noqa: F401,E501
from swagger_client.models.transaction import Transaction  # noqa: F401,E501


class PageableTransactionList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transactions': 'list[Transaction]',
        'paging': 'Paging',
        'income': 'float',
        'spending': 'float',
        'balance': 'float'
    }

    attribute_map = {
        'transactions': 'transactions',
        'paging': 'paging',
        'income': 'income',
        'spending': 'spending',
        'balance': 'balance'
    }

    def __init__(self, transactions=None, paging=None, income=None, spending=None, balance=None):  # noqa: E501
        """PageableTransactionList - a model defined in Swagger"""  # noqa: E501

        self._transactions = None
        self._paging = None
        self._income = None
        self._spending = None
        self._balance = None
        self.discriminator = None

        self.transactions = transactions
        self.paging = paging
        self.income = income
        self.spending = spending
        self.balance = balance

    @property
    def transactions(self):
        """Gets the transactions of this PageableTransactionList.  # noqa: E501

        Array of transactions per page  # noqa: E501

        :return: The transactions of this PageableTransactionList.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this PageableTransactionList.

        Array of transactions per page  # noqa: E501

        :param transactions: The transactions of this PageableTransactionList.  # noqa: E501
        :type: list[Transaction]
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    @property
    def paging(self):
        """Gets the paging of this PageableTransactionList.  # noqa: E501

        Information for pagination  # noqa: E501

        :return: The paging of this PageableTransactionList.  # noqa: E501
        :rtype: Paging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this PageableTransactionList.

        Information for pagination  # noqa: E501

        :param paging: The paging of this PageableTransactionList.  # noqa: E501
        :type: Paging
        """
        if paging is None:
            raise ValueError("Invalid value for `paging`, must not be `None`")  # noqa: E501

        self._paging = paging

    @property
    def income(self):
        """Gets the income of this PageableTransactionList.  # noqa: E501

        The total income of all transactions  # noqa: E501

        :return: The income of this PageableTransactionList.  # noqa: E501
        :rtype: float
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this PageableTransactionList.

        The total income of all transactions  # noqa: E501

        :param income: The income of this PageableTransactionList.  # noqa: E501
        :type: float
        """
        if income is None:
            raise ValueError("Invalid value for `income`, must not be `None`")  # noqa: E501

        self._income = income

    @property
    def spending(self):
        """Gets the spending of this PageableTransactionList.  # noqa: E501

        The total spending of all transactions  # noqa: E501

        :return: The spending of this PageableTransactionList.  # noqa: E501
        :rtype: float
        """
        return self._spending

    @spending.setter
    def spending(self, spending):
        """Sets the spending of this PageableTransactionList.

        The total spending of all transactions  # noqa: E501

        :param spending: The spending of this PageableTransactionList.  # noqa: E501
        :type: float
        """
        if spending is None:
            raise ValueError("Invalid value for `spending`, must not be `None`")  # noqa: E501

        self._spending = spending

    @property
    def balance(self):
        """Gets the balance of this PageableTransactionList.  # noqa: E501

        The total sum of all transactions  # noqa: E501

        :return: The balance of this PageableTransactionList.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this PageableTransactionList.

        The total sum of all transactions  # noqa: E501

        :param balance: The balance of this PageableTransactionList.  # noqa: E501
        :type: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageableTransactionList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
