# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaypalTransactionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_number': 'str',
        'fee': 'float',
        'net': 'float',
        'auction_site': 'str'
    }

    attribute_map = {
        'invoice_number': 'invoiceNumber',
        'fee': 'fee',
        'net': 'net',
        'auction_site': 'auctionSite'
    }

    def __init__(self, invoice_number=None, fee=None, net=None, auction_site=None):  # noqa: E501
        """PaypalTransactionData - a model defined in Swagger"""  # noqa: E501

        self._invoice_number = None
        self._fee = None
        self._net = None
        self._auction_site = None
        self.discriminator = None

        if invoice_number is not None:
            self.invoice_number = invoice_number
        if fee is not None:
            self.fee = fee
        if net is not None:
            self.net = net
        if auction_site is not None:
            self.auction_site = auction_site

    @property
    def invoice_number(self):
        """Gets the invoice_number of this PaypalTransactionData.  # noqa: E501

        Invoice Number  # noqa: E501

        :return: The invoice_number of this PaypalTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this PaypalTransactionData.

        Invoice Number  # noqa: E501

        :param invoice_number: The invoice_number of this PaypalTransactionData.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def fee(self):
        """Gets the fee of this PaypalTransactionData.  # noqa: E501

        Fee value  # noqa: E501

        :return: The fee of this PaypalTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this PaypalTransactionData.

        Fee value  # noqa: E501

        :param fee: The fee of this PaypalTransactionData.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def net(self):
        """Gets the net of this PaypalTransactionData.  # noqa: E501

        Net value  # noqa: E501

        :return: The net of this PaypalTransactionData.  # noqa: E501
        :rtype: float
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this PaypalTransactionData.

        Net value  # noqa: E501

        :param net: The net of this PaypalTransactionData.  # noqa: E501
        :type: float
        """

        self._net = net

    @property
    def auction_site(self):
        """Gets the auction_site of this PaypalTransactionData.  # noqa: E501

        Auction Site  # noqa: E501

        :return: The auction_site of this PaypalTransactionData.  # noqa: E501
        :rtype: str
        """
        return self._auction_site

    @auction_site.setter
    def auction_site(self, auction_site):
        """Sets the auction_site of this PaypalTransactionData.

        Auction Site  # noqa: E501

        :param auction_site: The auction_site of this PaypalTransactionData.  # noqa: E501
        :type: str
        """

        self._auction_site = auction_site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaypalTransactionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
