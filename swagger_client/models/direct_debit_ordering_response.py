# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DirectDebitOrderingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success_message': 'str',
        'warn_message': 'str',
        'challenge_message': 'str',
        'answer_field_label': 'str',
        'tan_list_number': 'str',
        'optical_data': 'str',
        'photo_tan_mime_type': 'str',
        'photo_tan_data': 'str'
    }

    attribute_map = {
        'success_message': 'successMessage',
        'warn_message': 'warnMessage',
        'challenge_message': 'challengeMessage',
        'answer_field_label': 'answerFieldLabel',
        'tan_list_number': 'tanListNumber',
        'optical_data': 'opticalData',
        'photo_tan_mime_type': 'photoTanMimeType',
        'photo_tan_data': 'photoTanData'
    }

    def __init__(self, success_message=None, warn_message=None, challenge_message=None, answer_field_label=None, tan_list_number=None, optical_data=None, photo_tan_mime_type=None, photo_tan_data=None):  # noqa: E501
        """DirectDebitOrderingResponse - a model defined in Swagger"""  # noqa: E501

        self._success_message = None
        self._warn_message = None
        self._challenge_message = None
        self._answer_field_label = None
        self._tan_list_number = None
        self._optical_data = None
        self._photo_tan_mime_type = None
        self._photo_tan_data = None
        self.discriminator = None

        if success_message is not None:
            self.success_message = success_message
        if warn_message is not None:
            self.warn_message = warn_message
        if challenge_message is not None:
            self.challenge_message = challenge_message
        if answer_field_label is not None:
            self.answer_field_label = answer_field_label
        if tan_list_number is not None:
            self.tan_list_number = tan_list_number
        if optical_data is not None:
            self.optical_data = optical_data
        if photo_tan_mime_type is not None:
            self.photo_tan_mime_type = photo_tan_mime_type
        if photo_tan_data is not None:
            self.photo_tan_data = photo_tan_data

    @property
    def success_message(self):
        """Gets the success_message of this DirectDebitOrderingResponse.  # noqa: E501

        Technical message from the bank server, confirming the success of the request. Typically, you would not want to present this message to the user. Note that this field may not be set. However if it is not set, it does not necessarily mean that there was an error in processing the request.  # noqa: E501

        :return: The success_message of this DirectDebitOrderingResponse.  # noqa: E501
        :rtype: str
        """
        return self._success_message

    @success_message.setter
    def success_message(self, success_message):
        """Sets the success_message of this DirectDebitOrderingResponse.

        Technical message from the bank server, confirming the success of the request. Typically, you would not want to present this message to the user. Note that this field may not be set. However if it is not set, it does not necessarily mean that there was an error in processing the request.  # noqa: E501

        :param success_message: The success_message of this DirectDebitOrderingResponse.  # noqa: E501
        :type: str
        """

        self._success_message = success_message

    @property
    def warn_message(self):
        """Gets the warn_message of this DirectDebitOrderingResponse.  # noqa: E501

        In some cases, a bank server may accept the requested order, but return a warn message. This message may be of technical nature, but could also be of interest to the user.  # noqa: E501

        :return: The warn_message of this DirectDebitOrderingResponse.  # noqa: E501
        :rtype: str
        """
        return self._warn_message

    @warn_message.setter
    def warn_message(self, warn_message):
        """Sets the warn_message of this DirectDebitOrderingResponse.

        In some cases, a bank server may accept the requested order, but return a warn message. This message may be of technical nature, but could also be of interest to the user.  # noqa: E501

        :param warn_message: The warn_message of this DirectDebitOrderingResponse.  # noqa: E501
        :type: str
        """

        self._warn_message = warn_message

    @property
    def challenge_message(self):
        """Gets the challenge_message of this DirectDebitOrderingResponse.  # noqa: E501

        Message from the bank server containing information or instructions on how to retrieve the TAN that is needed to execute the requested order. This message should be presented to the user. Note that some bank servers may limit the message to just the most crucial information, e.g. the message may contain just a single number that depicts the target TAN number on a user's TAN list. You may want to parse the challenge message for such cases and extend it with more detailed information before showing it to the user.  # noqa: E501

        :return: The challenge_message of this DirectDebitOrderingResponse.  # noqa: E501
        :rtype: str
        """
        return self._challenge_message

    @challenge_message.setter
    def challenge_message(self, challenge_message):
        """Sets the challenge_message of this DirectDebitOrderingResponse.

        Message from the bank server containing information or instructions on how to retrieve the TAN that is needed to execute the requested order. This message should be presented to the user. Note that some bank servers may limit the message to just the most crucial information, e.g. the message may contain just a single number that depicts the target TAN number on a user's TAN list. You may want to parse the challenge message for such cases and extend it with more detailed information before showing it to the user.  # noqa: E501

        :param challenge_message: The challenge_message of this DirectDebitOrderingResponse.  # noqa: E501
        :type: str
        """

        self._challenge_message = challenge_message

    @property
    def answer_field_label(self):
        """Gets the answer_field_label of this DirectDebitOrderingResponse.  # noqa: E501

        Suggestion from the bank server on how you can label your input field where the user must enter his TAN. A typical value that many bank servers give is 'TAN-Nummer'.  # noqa: E501

        :return: The answer_field_label of this DirectDebitOrderingResponse.  # noqa: E501
        :rtype: str
        """
        return self._answer_field_label

    @answer_field_label.setter
    def answer_field_label(self, answer_field_label):
        """Sets the answer_field_label of this DirectDebitOrderingResponse.

        Suggestion from the bank server on how you can label your input field where the user must enter his TAN. A typical value that many bank servers give is 'TAN-Nummer'.  # noqa: E501

        :param answer_field_label: The answer_field_label of this DirectDebitOrderingResponse.  # noqa: E501
        :type: str
        """

        self._answer_field_label = answer_field_label

    @property
    def tan_list_number(self):
        """Gets the tan_list_number of this DirectDebitOrderingResponse.  # noqa: E501

        In case that the bank server has instructed the user to look up a TAN from a TAN list, this field may contain the identification number of the TAN list. However in most cases, this field is only set (i.e. not null) when the user has multiple active TAN lists.  # noqa: E501

        :return: The tan_list_number of this DirectDebitOrderingResponse.  # noqa: E501
        :rtype: str
        """
        return self._tan_list_number

    @tan_list_number.setter
    def tan_list_number(self, tan_list_number):
        """Sets the tan_list_number of this DirectDebitOrderingResponse.

        In case that the bank server has instructed the user to look up a TAN from a TAN list, this field may contain the identification number of the TAN list. However in most cases, this field is only set (i.e. not null) when the user has multiple active TAN lists.  # noqa: E501

        :param tan_list_number: The tan_list_number of this DirectDebitOrderingResponse.  # noqa: E501
        :type: str
        """

        self._tan_list_number = tan_list_number

    @property
    def optical_data(self):
        """Gets the optical_data of this DirectDebitOrderingResponse.  # noqa: E501

        In case that the bank server has instructed the user to scan a flicker code, then this field will contain the raw data for the flicker animation as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the flicker code data, please address the <a href=\"https://finapi.zendesk.com\">finAPI Developer Portal</a>.  # noqa: E501

        :return: The optical_data of this DirectDebitOrderingResponse.  # noqa: E501
        :rtype: str
        """
        return self._optical_data

    @optical_data.setter
    def optical_data(self, optical_data):
        """Sets the optical_data of this DirectDebitOrderingResponse.

        In case that the bank server has instructed the user to scan a flicker code, then this field will contain the raw data for the flicker animation as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the flicker code data, please address the <a href=\"https://finapi.zendesk.com\">finAPI Developer Portal</a>.  # noqa: E501

        :param optical_data: The optical_data of this DirectDebitOrderingResponse.  # noqa: E501
        :type: str
        """

        self._optical_data = optical_data

    @property
    def photo_tan_mime_type(self):
        """Gets the photo_tan_mime_type of this DirectDebitOrderingResponse.  # noqa: E501

        In case that the 'photoTanData' field is set (i.e. not null), this field contains the MIME type to use for interpreting the photo data (e.g.: 'image/png')  # noqa: E501

        :return: The photo_tan_mime_type of this DirectDebitOrderingResponse.  # noqa: E501
        :rtype: str
        """
        return self._photo_tan_mime_type

    @photo_tan_mime_type.setter
    def photo_tan_mime_type(self, photo_tan_mime_type):
        """Sets the photo_tan_mime_type of this DirectDebitOrderingResponse.

        In case that the 'photoTanData' field is set (i.e. not null), this field contains the MIME type to use for interpreting the photo data (e.g.: 'image/png')  # noqa: E501

        :param photo_tan_mime_type: The photo_tan_mime_type of this DirectDebitOrderingResponse.  # noqa: E501
        :type: str
        """

        self._photo_tan_mime_type = photo_tan_mime_type

    @property
    def photo_tan_data(self):
        """Gets the photo_tan_data of this DirectDebitOrderingResponse.  # noqa: E501

        In case that the bank server has instructed the user to scan a photo (or more generally speaking, any kind of QR-code-like data), then this field will contain the raw data of the photo as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the photo data, please address the <a href=\"https://finapi.zendesk.com\">finAPI Developer Portal</a>.  # noqa: E501

        :return: The photo_tan_data of this DirectDebitOrderingResponse.  # noqa: E501
        :rtype: str
        """
        return self._photo_tan_data

    @photo_tan_data.setter
    def photo_tan_data(self, photo_tan_data):
        """Sets the photo_tan_data of this DirectDebitOrderingResponse.

        In case that the bank server has instructed the user to scan a photo (or more generally speaking, any kind of QR-code-like data), then this field will contain the raw data of the photo as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the photo data, please address the <a href=\"https://finapi.zendesk.com\">finAPI Developer Portal</a>.  # noqa: E501

        :param photo_tan_data: The photo_tan_data of this DirectDebitOrderingResponse.  # noqa: E501
        :type: str
        """

        self._photo_tan_data = photo_tan_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectDebitOrderingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
