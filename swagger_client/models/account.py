# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.clearing_account_data import ClearingAccountData  # noqa: F401,E501


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'bank_connection_id': 'int',
        'account_name': 'str',
        'account_number': 'str',
        'sub_account_number': 'str',
        'iban': 'str',
        'account_holder_name': 'str',
        'account_holder_id': 'str',
        'account_currency': 'str',
        'account_type_id': 'int',
        'account_type_name': 'str',
        'balance': 'float',
        'overdraft': 'float',
        'overdraft_limit': 'float',
        'available_funds': 'float',
        'last_successful_update': 'str',
        'last_update_attempt': 'str',
        'is_new': 'bool',
        'status': 'str',
        'supported_orders': 'list[str]',
        'clearing_accounts': 'list[ClearingAccountData]'
    }

    attribute_map = {
        'id': 'id',
        'bank_connection_id': 'bankConnectionId',
        'account_name': 'accountName',
        'account_number': 'accountNumber',
        'sub_account_number': 'subAccountNumber',
        'iban': 'iban',
        'account_holder_name': 'accountHolderName',
        'account_holder_id': 'accountHolderId',
        'account_currency': 'accountCurrency',
        'account_type_id': 'accountTypeId',
        'account_type_name': 'accountTypeName',
        'balance': 'balance',
        'overdraft': 'overdraft',
        'overdraft_limit': 'overdraftLimit',
        'available_funds': 'availableFunds',
        'last_successful_update': 'lastSuccessfulUpdate',
        'last_update_attempt': 'lastUpdateAttempt',
        'is_new': 'isNew',
        'status': 'status',
        'supported_orders': 'supportedOrders',
        'clearing_accounts': 'clearingAccounts'
    }

    def __init__(self, id=None, bank_connection_id=None, account_name=None, account_number=None, sub_account_number=None, iban=None, account_holder_name=None, account_holder_id=None, account_currency=None, account_type_id=None, account_type_name=None, balance=None, overdraft=None, overdraft_limit=None, available_funds=None, last_successful_update=None, last_update_attempt=None, is_new=False, status=None, supported_orders=None, clearing_accounts=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._bank_connection_id = None
        self._account_name = None
        self._account_number = None
        self._sub_account_number = None
        self._iban = None
        self._account_holder_name = None
        self._account_holder_id = None
        self._account_currency = None
        self._account_type_id = None
        self._account_type_name = None
        self._balance = None
        self._overdraft = None
        self._overdraft_limit = None
        self._available_funds = None
        self._last_successful_update = None
        self._last_update_attempt = None
        self._is_new = None
        self._status = None
        self._supported_orders = None
        self._clearing_accounts = None
        self.discriminator = None

        self.id = id
        self.bank_connection_id = bank_connection_id
        if account_name is not None:
            self.account_name = account_name
        self.account_number = account_number
        if sub_account_number is not None:
            self.sub_account_number = sub_account_number
        if iban is not None:
            self.iban = iban
        if account_holder_name is not None:
            self.account_holder_name = account_holder_name
        if account_holder_id is not None:
            self.account_holder_id = account_holder_id
        if account_currency is not None:
            self.account_currency = account_currency
        self.account_type_id = account_type_id
        self.account_type_name = account_type_name
        if balance is not None:
            self.balance = balance
        if overdraft is not None:
            self.overdraft = overdraft
        if overdraft_limit is not None:
            self.overdraft_limit = overdraft_limit
        if available_funds is not None:
            self.available_funds = available_funds
        if last_successful_update is not None:
            self.last_successful_update = last_successful_update
        if last_update_attempt is not None:
            self.last_update_attempt = last_update_attempt
        self.is_new = is_new
        self.status = status
        self.supported_orders = supported_orders
        if clearing_accounts is not None:
            self.clearing_accounts = clearing_accounts

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        Account identifier  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Account identifier  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def bank_connection_id(self):
        """Gets the bank_connection_id of this Account.  # noqa: E501

        Identifier of the bank connection that this account belongs to  # noqa: E501

        :return: The bank_connection_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._bank_connection_id

    @bank_connection_id.setter
    def bank_connection_id(self, bank_connection_id):
        """Sets the bank_connection_id of this Account.

        Identifier of the bank connection that this account belongs to  # noqa: E501

        :param bank_connection_id: The bank_connection_id of this Account.  # noqa: E501
        :type: int
        """
        if bank_connection_id is None:
            raise ValueError("Invalid value for `bank_connection_id`, must not be `None`")  # noqa: E501

        self._bank_connection_id = bank_connection_id

    @property
    def account_name(self):
        """Gets the account_name of this Account.  # noqa: E501

        Account name  # noqa: E501

        :return: The account_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Account.

        Account name  # noqa: E501

        :param account_name: The account_name of this Account.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this Account.  # noqa: E501

        (National) account number. Note that this value might change whenever the account is updated (for example, leading zeros might be added or removed).  # noqa: E501

        :return: The account_number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Account.

        (National) account number. Note that this value might change whenever the account is updated (for example, leading zeros might be added or removed).  # noqa: E501

        :param account_number: The account_number of this Account.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def sub_account_number(self):
        """Gets the sub_account_number of this Account.  # noqa: E501

        Account's sub-account-number. Note that this field can change from 'null' to a value - or vice versa - any time when the account is being updated. This is subject to changes within the bank's internal account management.  # noqa: E501

        :return: The sub_account_number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._sub_account_number

    @sub_account_number.setter
    def sub_account_number(self, sub_account_number):
        """Sets the sub_account_number of this Account.

        Account's sub-account-number. Note that this field can change from 'null' to a value - or vice versa - any time when the account is being updated. This is subject to changes within the bank's internal account management.  # noqa: E501

        :param sub_account_number: The sub_account_number of this Account.  # noqa: E501
        :type: str
        """

        self._sub_account_number = sub_account_number

    @property
    def iban(self):
        """Gets the iban of this Account.  # noqa: E501

        Account's IBAN. Note that this field can change from 'null' to a value - or vice versa - any time when the account is being updated. This is subject to changes within the bank's internal account management.  # noqa: E501

        :return: The iban of this Account.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this Account.

        Account's IBAN. Note that this field can change from 'null' to a value - or vice versa - any time when the account is being updated. This is subject to changes within the bank's internal account management.  # noqa: E501

        :param iban: The iban of this Account.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def account_holder_name(self):
        """Gets the account_holder_name of this Account.  # noqa: E501

        Name of the account holder  # noqa: E501

        :return: The account_holder_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_holder_name

    @account_holder_name.setter
    def account_holder_name(self, account_holder_name):
        """Sets the account_holder_name of this Account.

        Name of the account holder  # noqa: E501

        :param account_holder_name: The account_holder_name of this Account.  # noqa: E501
        :type: str
        """

        self._account_holder_name = account_holder_name

    @property
    def account_holder_id(self):
        """Gets the account_holder_id of this Account.  # noqa: E501

        Bank's internal identification of the account holder  # noqa: E501

        :return: The account_holder_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_holder_id

    @account_holder_id.setter
    def account_holder_id(self, account_holder_id):
        """Sets the account_holder_id of this Account.

        Bank's internal identification of the account holder  # noqa: E501

        :param account_holder_id: The account_holder_id of this Account.  # noqa: E501
        :type: str
        """

        self._account_holder_id = account_holder_id

    @property
    def account_currency(self):
        """Gets the account_currency of this Account.  # noqa: E501

        Account's currency  # noqa: E501

        :return: The account_currency of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_currency

    @account_currency.setter
    def account_currency(self, account_currency):
        """Sets the account_currency of this Account.

        Account's currency  # noqa: E501

        :param account_currency: The account_currency of this Account.  # noqa: E501
        :type: str
        """

        self._account_currency = account_currency

    @property
    def account_type_id(self):
        """Gets the account_type_id of this Account.  # noqa: E501

        Identifier of the account's type. Note that, in general, the type of an account can change any time when the account is being updated. This is subject to changes within the bank's internal account management. However, if the account's type has previously been changed explicitly (via the PATCH method), then the explicitly set type will NOT be automatically changed anymore, even if the type has changed on the bank side. <br/>1 = Checking,<br/>2 = Savings,<br/>3 = CreditCard,<br/>4 = Security,<br/>5 = Loan,<br/>6 = Pocket (DEPRECATED; will not be returned for any account unless this type has explicitly been set via PATCH),<br/>7 = Membership,<br/>8 = Bausparen<br/>  # noqa: E501

        :return: The account_type_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._account_type_id

    @account_type_id.setter
    def account_type_id(self, account_type_id):
        """Sets the account_type_id of this Account.

        Identifier of the account's type. Note that, in general, the type of an account can change any time when the account is being updated. This is subject to changes within the bank's internal account management. However, if the account's type has previously been changed explicitly (via the PATCH method), then the explicitly set type will NOT be automatically changed anymore, even if the type has changed on the bank side. <br/>1 = Checking,<br/>2 = Savings,<br/>3 = CreditCard,<br/>4 = Security,<br/>5 = Loan,<br/>6 = Pocket (DEPRECATED; will not be returned for any account unless this type has explicitly been set via PATCH),<br/>7 = Membership,<br/>8 = Bausparen<br/>  # noqa: E501

        :param account_type_id: The account_type_id of this Account.  # noqa: E501
        :type: int
        """
        if account_type_id is None:
            raise ValueError("Invalid value for `account_type_id`, must not be `None`")  # noqa: E501

        self._account_type_id = account_type_id

    @property
    def account_type_name(self):
        """Gets the account_type_name of this Account.  # noqa: E501

        Name of the account's type  # noqa: E501

        :return: The account_type_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_type_name

    @account_type_name.setter
    def account_type_name(self, account_type_name):
        """Sets the account_type_name of this Account.

        Name of the account's type  # noqa: E501

        :param account_type_name: The account_type_name of this Account.  # noqa: E501
        :type: str
        """
        if account_type_name is None:
            raise ValueError("Invalid value for `account_type_name`, must not be `None`")  # noqa: E501

        self._account_type_name = account_type_name

    @property
    def balance(self):
        """Gets the balance of this Account.  # noqa: E501

        Current account balance  # noqa: E501

        :return: The balance of this Account.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Account.

        Current account balance  # noqa: E501

        :param balance: The balance of this Account.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def overdraft(self):
        """Gets the overdraft of this Account.  # noqa: E501

        Current overdraft  # noqa: E501

        :return: The overdraft of this Account.  # noqa: E501
        :rtype: float
        """
        return self._overdraft

    @overdraft.setter
    def overdraft(self, overdraft):
        """Sets the overdraft of this Account.

        Current overdraft  # noqa: E501

        :param overdraft: The overdraft of this Account.  # noqa: E501
        :type: float
        """

        self._overdraft = overdraft

    @property
    def overdraft_limit(self):
        """Gets the overdraft_limit of this Account.  # noqa: E501

        Overdraft limit  # noqa: E501

        :return: The overdraft_limit of this Account.  # noqa: E501
        :rtype: float
        """
        return self._overdraft_limit

    @overdraft_limit.setter
    def overdraft_limit(self, overdraft_limit):
        """Sets the overdraft_limit of this Account.

        Overdraft limit  # noqa: E501

        :param overdraft_limit: The overdraft_limit of this Account.  # noqa: E501
        :type: float
        """

        self._overdraft_limit = overdraft_limit

    @property
    def available_funds(self):
        """Gets the available_funds of this Account.  # noqa: E501

        Current available funds. Note that this field is only set if finAPI can make a definite statement about the current available funds. This might not always be the case, for example if there is not enough information available about the overdraft limit and current overdraft.  # noqa: E501

        :return: The available_funds of this Account.  # noqa: E501
        :rtype: float
        """
        return self._available_funds

    @available_funds.setter
    def available_funds(self, available_funds):
        """Sets the available_funds of this Account.

        Current available funds. Note that this field is only set if finAPI can make a definite statement about the current available funds. This might not always be the case, for example if there is not enough information available about the overdraft limit and current overdraft.  # noqa: E501

        :param available_funds: The available_funds of this Account.  # noqa: E501
        :type: float
        """

        self._available_funds = available_funds

    @property
    def last_successful_update(self):
        """Gets the last_successful_update of this Account.  # noqa: E501

        Timestamp of when the account was last successfully updated (or initially imported); more precisely: time when the account data (balance and positions) has been stored into the finAPI databases. The value is returned in the format 'yyyy-MM-dd HH:mm:ss.SSS' (german time).  # noqa: E501

        :return: The last_successful_update of this Account.  # noqa: E501
        :rtype: str
        """
        return self._last_successful_update

    @last_successful_update.setter
    def last_successful_update(self, last_successful_update):
        """Sets the last_successful_update of this Account.

        Timestamp of when the account was last successfully updated (or initially imported); more precisely: time when the account data (balance and positions) has been stored into the finAPI databases. The value is returned in the format 'yyyy-MM-dd HH:mm:ss.SSS' (german time).  # noqa: E501

        :param last_successful_update: The last_successful_update of this Account.  # noqa: E501
        :type: str
        """

        self._last_successful_update = last_successful_update

    @property
    def last_update_attempt(self):
        """Gets the last_update_attempt of this Account.  # noqa: E501

        Timestamp of when the account was last tried to be updated (or initially imported); more precisely: time when the update (or initial import) was triggered. The value is returned in the format 'yyyy-MM-dd HH:mm:ss.SSS' (german time).  # noqa: E501

        :return: The last_update_attempt of this Account.  # noqa: E501
        :rtype: str
        """
        return self._last_update_attempt

    @last_update_attempt.setter
    def last_update_attempt(self, last_update_attempt):
        """Sets the last_update_attempt of this Account.

        Timestamp of when the account was last tried to be updated (or initially imported); more precisely: time when the update (or initial import) was triggered. The value is returned in the format 'yyyy-MM-dd HH:mm:ss.SSS' (german time).  # noqa: E501

        :param last_update_attempt: The last_update_attempt of this Account.  # noqa: E501
        :type: str
        """

        self._last_update_attempt = last_update_attempt

    @property
    def is_new(self):
        """Gets the is_new of this Account.  # noqa: E501

        Indicating whether this account is 'new' or not. Any newly imported account will have this flag initially set to true, and remain so until you set it to false (see PATCH /accounts/<id>). How you use this field is up to your interpretation, however it is recommended to set the flag to false for all accounts right after the initial import of the bank connection. This way, you will be able recognize accounts that get newly imported during a later update of the bank connection, by checking for any accounts with the flag set to true right after an update.  # noqa: E501

        :return: The is_new of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this Account.

        Indicating whether this account is 'new' or not. Any newly imported account will have this flag initially set to true, and remain so until you set it to false (see PATCH /accounts/<id>). How you use this field is up to your interpretation, however it is recommended to set the flag to false for all accounts right after the initial import of the bank connection. This way, you will be able recognize accounts that get newly imported during a later update of the bank connection, by checking for any accounts with the flag set to true right after an update.  # noqa: E501

        :param is_new: The is_new of this Account.  # noqa: E501
        :type: bool
        """
        if is_new is None:
            raise ValueError("Invalid value for `is_new`, must not be `None`")  # noqa: E501

        self._is_new = is_new

    @property
    def status(self):
        """Gets the status of this Account.  # noqa: E501

        The current status of the account. Possible values are:<br/>&bull; <code>UPDATED</code> means that the account is up to date from finAPI's point of view. This means that no current import/update is running, and the previous import/update could successfully update the account's data (e.g. transactions and securities), and the bank given balance matched the transaction's calculated sum, meaning that no adjusting entry ('Zwischensaldo' transaction) was inserted.<br/>&bull; <code>UPDATED_FIXED</code> means that the account is up to date from finAPI's point of view (no current import/update is running, and the previous import/update could successfully update the account's data), BUT there was a deviation in the bank given balance which was fixed by adding an adjusting entry ('Zwischensaldo' transaction).<br/>&bull; <code>DOWNLOAD_IN_PROGRESS</code> means that the account's data is currently being imported/updated.<br/>&bull; <code>DOWNLOAD_FAILED</code> means that the account data could not get successfully imported or updated. Possible reasons: finAPI could not get the account's balance, or it could not parse all transactions/securities, or some internal error has occurred. Also, it could mean that finAPI could not even get to the point of receiving the account data from the bank server, for example because of incorrect login credentials or a network problem. Note however that when we get a balance and just an empty list of transactions or securities, then this is regarded as valid and successful download. The reason for this is that for some accounts that have little activity, we may actually get no recent transactions but only a balance.<br/>&bull; <code>DEPRECATED</code> means that the account could no longer get matched with any account from the bank server. This can mean either that the account was terminated by the user and is no longer sent by the bank server, or that finAPI could no longer match it because the account's data (name, type, iban, account number, etc.) has been changed by the bank.  # noqa: E501

        :return: The status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        The current status of the account. Possible values are:<br/>&bull; <code>UPDATED</code> means that the account is up to date from finAPI's point of view. This means that no current import/update is running, and the previous import/update could successfully update the account's data (e.g. transactions and securities), and the bank given balance matched the transaction's calculated sum, meaning that no adjusting entry ('Zwischensaldo' transaction) was inserted.<br/>&bull; <code>UPDATED_FIXED</code> means that the account is up to date from finAPI's point of view (no current import/update is running, and the previous import/update could successfully update the account's data), BUT there was a deviation in the bank given balance which was fixed by adding an adjusting entry ('Zwischensaldo' transaction).<br/>&bull; <code>DOWNLOAD_IN_PROGRESS</code> means that the account's data is currently being imported/updated.<br/>&bull; <code>DOWNLOAD_FAILED</code> means that the account data could not get successfully imported or updated. Possible reasons: finAPI could not get the account's balance, or it could not parse all transactions/securities, or some internal error has occurred. Also, it could mean that finAPI could not even get to the point of receiving the account data from the bank server, for example because of incorrect login credentials or a network problem. Note however that when we get a balance and just an empty list of transactions or securities, then this is regarded as valid and successful download. The reason for this is that for some accounts that have little activity, we may actually get no recent transactions but only a balance.<br/>&bull; <code>DEPRECATED</code> means that the account could no longer get matched with any account from the bank server. This can mean either that the account was terminated by the user and is no longer sent by the bank server, or that finAPI could no longer match it because the account's data (name, type, iban, account number, etc.) has been changed by the bank.  # noqa: E501

        :param status: The status of this Account.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["UPDATED", "UPDATED_FIXED", "DOWNLOAD_IN_PROGRESS", "DOWNLOAD_FAILED", "DEPRECATED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supported_orders(self):
        """Gets the supported_orders of this Account.  # noqa: E501

        List of orders that this account supports. Possible values are:<br/><br/>&bull; <code>SEPA_MONEY_TRANSFER</code> - single money transfer<br/>&bull; <code>SEPA_COLLECTIVE_MONEY_TRANSFER</code> - collective money transfer<br/>&bull; <code>SEPA_BASIC_DIRECT_DEBIT</code> - single basic direct debit<br/>&bull; <code>SEPA_BASIC_COLLECTIVE_DIRECT_DEBIT</code> - collective basic direct debit<br/>&bull; <code>SEPA_B2B_DIRECT_DEBIT</code> - single Business-To-Business direct debit<br/>&bull; <code>SEPA_B2B_COLLECTIVE_DIRECT_DEBIT</code> - collective Business-To-Business direct debit<br/><br/>Note that this list may be empty if the account is not supporting any of the above orders. Also note that the list is refreshed each time the account is being updated, so available orders may get added or removed in the course of an account update.<br/><br/>  # noqa: E501

        :return: The supported_orders of this Account.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_orders

    @supported_orders.setter
    def supported_orders(self, supported_orders):
        """Sets the supported_orders of this Account.

        List of orders that this account supports. Possible values are:<br/><br/>&bull; <code>SEPA_MONEY_TRANSFER</code> - single money transfer<br/>&bull; <code>SEPA_COLLECTIVE_MONEY_TRANSFER</code> - collective money transfer<br/>&bull; <code>SEPA_BASIC_DIRECT_DEBIT</code> - single basic direct debit<br/>&bull; <code>SEPA_BASIC_COLLECTIVE_DIRECT_DEBIT</code> - collective basic direct debit<br/>&bull; <code>SEPA_B2B_DIRECT_DEBIT</code> - single Business-To-Business direct debit<br/>&bull; <code>SEPA_B2B_COLLECTIVE_DIRECT_DEBIT</code> - collective Business-To-Business direct debit<br/><br/>Note that this list may be empty if the account is not supporting any of the above orders. Also note that the list is refreshed each time the account is being updated, so available orders may get added or removed in the course of an account update.<br/><br/>  # noqa: E501

        :param supported_orders: The supported_orders of this Account.  # noqa: E501
        :type: list[str]
        """
        if supported_orders is None:
            raise ValueError("Invalid value for `supported_orders`, must not be `None`")  # noqa: E501
        allowed_values = ["SEPA_MONEY_TRANSFER", "SEPA_COLLECTIVE_MONEY_TRANSFER", "SEPA_BASIC_DIRECT_DEBIT", "SEPA_BASIC_COLLECTIVE_DIRECT_DEBIT", "SEPA_B2B_DIRECT_DEBIT", "SEPA_B2B_COLLECTIVE_DIRECT_DEBIT"]  # noqa: E501
        if not set(supported_orders).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_orders` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(supported_orders) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_orders = supported_orders

    @property
    def clearing_accounts(self):
        """Gets the clearing_accounts of this Account.  # noqa: E501

        List of clearing accounts that relate to this account  # noqa: E501

        :return: The clearing_accounts of this Account.  # noqa: E501
        :rtype: list[ClearingAccountData]
        """
        return self._clearing_accounts

    @clearing_accounts.setter
    def clearing_accounts(self, clearing_accounts):
        """Sets the clearing_accounts of this Account.

        List of clearing accounts that relate to this account  # noqa: E501

        :param clearing_accounts: The clearing_accounts of this Account.  # noqa: E501
        :type: list[ClearingAccountData]
        """

        self._clearing_accounts = clearing_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
