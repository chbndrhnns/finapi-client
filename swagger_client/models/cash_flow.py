# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.41.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.category import Category  # noqa: F401,E501


class CashFlow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'Category',
        'income': 'float',
        'spending': 'float',
        'balance': 'float'
    }

    attribute_map = {
        'category': 'category',
        'income': 'income',
        'spending': 'spending',
        'balance': 'balance'
    }

    def __init__(self, category=None, income=None, spending=None, balance=None):  # noqa: E501
        """CashFlow - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._income = None
        self._spending = None
        self._balance = None
        self.discriminator = None

        if category is not None:
            self.category = category
        self.income = income
        self.spending = spending
        self.balance = balance

    @property
    def category(self):
        """Gets the category of this CashFlow.  # noqa: E501

        Category of this cash flow. When null, then this is the cash flow of transactions that do not have a category.  # noqa: E501

        :return: The category of this CashFlow.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CashFlow.

        Category of this cash flow. When null, then this is the cash flow of transactions that do not have a category.  # noqa: E501

        :param category: The category of this CashFlow.  # noqa: E501
        :type: Category
        """

        self._category = category

    @property
    def income(self):
        """Gets the income of this CashFlow.  # noqa: E501

        The total calculated income for the given category  # noqa: E501

        :return: The income of this CashFlow.  # noqa: E501
        :rtype: float
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this CashFlow.

        The total calculated income for the given category  # noqa: E501

        :param income: The income of this CashFlow.  # noqa: E501
        :type: float
        """
        if income is None:
            raise ValueError("Invalid value for `income`, must not be `None`")  # noqa: E501

        self._income = income

    @property
    def spending(self):
        """Gets the spending of this CashFlow.  # noqa: E501

        The total calculated spending for the given category  # noqa: E501

        :return: The spending of this CashFlow.  # noqa: E501
        :rtype: float
        """
        return self._spending

    @spending.setter
    def spending(self, spending):
        """Sets the spending of this CashFlow.

        The total calculated spending for the given category  # noqa: E501

        :param spending: The spending of this CashFlow.  # noqa: E501
        :type: float
        """
        if spending is None:
            raise ValueError("Invalid value for `spending`, must not be `None`")  # noqa: E501

        self._spending = spending

    @property
    def balance(self):
        """Gets the balance of this CashFlow.  # noqa: E501

        The calculated balance for the given category  # noqa: E501

        :return: The balance of this CashFlow.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CashFlow.

        The calculated balance for the given category  # noqa: E501

        :param balance: The balance of this CashFlow.  # noqa: E501
        :type: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CashFlow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
