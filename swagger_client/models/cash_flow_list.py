# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.42.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.cash_flow import CashFlow  # noqa: F401,E501


class CashFlowList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cash_flows': 'list[CashFlow]',
        'total_income': 'float',
        'total_spending': 'float',
        'total_balance': 'float'
    }

    attribute_map = {
        'cash_flows': 'cashFlows',
        'total_income': 'totalIncome',
        'total_spending': 'totalSpending',
        'total_balance': 'totalBalance'
    }

    def __init__(self, cash_flows=None, total_income=None, total_spending=None, total_balance=None):  # noqa: E501
        """CashFlowList - a model defined in Swagger"""  # noqa: E501

        self._cash_flows = None
        self._total_income = None
        self._total_spending = None
        self._total_balance = None
        self.discriminator = None

        self.cash_flows = cash_flows
        self.total_income = total_income
        self.total_spending = total_spending
        self.total_balance = total_balance

    @property
    def cash_flows(self):
        """Gets the cash_flows of this CashFlowList.  # noqa: E501

        Array of cash flows  # noqa: E501

        :return: The cash_flows of this CashFlowList.  # noqa: E501
        :rtype: list[CashFlow]
        """
        return self._cash_flows

    @cash_flows.setter
    def cash_flows(self, cash_flows):
        """Sets the cash_flows of this CashFlowList.

        Array of cash flows  # noqa: E501

        :param cash_flows: The cash_flows of this CashFlowList.  # noqa: E501
        :type: list[CashFlow]
        """
        if cash_flows is None:
            raise ValueError("Invalid value for `cash_flows`, must not be `None`")  # noqa: E501

        self._cash_flows = cash_flows

    @property
    def total_income(self):
        """Gets the total_income of this CashFlowList.  # noqa: E501

        The total income  # noqa: E501

        :return: The total_income of this CashFlowList.  # noqa: E501
        :rtype: float
        """
        return self._total_income

    @total_income.setter
    def total_income(self, total_income):
        """Sets the total_income of this CashFlowList.

        The total income  # noqa: E501

        :param total_income: The total_income of this CashFlowList.  # noqa: E501
        :type: float
        """
        if total_income is None:
            raise ValueError("Invalid value for `total_income`, must not be `None`")  # noqa: E501

        self._total_income = total_income

    @property
    def total_spending(self):
        """Gets the total_spending of this CashFlowList.  # noqa: E501

        The total spending  # noqa: E501

        :return: The total_spending of this CashFlowList.  # noqa: E501
        :rtype: float
        """
        return self._total_spending

    @total_spending.setter
    def total_spending(self, total_spending):
        """Sets the total_spending of this CashFlowList.

        The total spending  # noqa: E501

        :param total_spending: The total_spending of this CashFlowList.  # noqa: E501
        :type: float
        """
        if total_spending is None:
            raise ValueError("Invalid value for `total_spending`, must not be `None`")  # noqa: E501

        self._total_spending = total_spending

    @property
    def total_balance(self):
        """Gets the total_balance of this CashFlowList.  # noqa: E501

        The total balance  # noqa: E501

        :return: The total_balance of this CashFlowList.  # noqa: E501
        :rtype: float
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this CashFlowList.

        The total balance  # noqa: E501

        :param total_balance: The total_balance of this CashFlowList.  # noqa: E501
        :type: float
        """
        if total_balance is None:
            raise ValueError("Invalid value for `total_balance`, must not be `None`")  # noqa: E501

        self._total_balance = total_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CashFlowList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
