# coding: utf-8

"""
    finAPI RESTful Services

    finAPI RESTful Services  # noqa: E501

    OpenAPI spec version: v1.42.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SingleDirectDebitData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'debitor_name': 'str',
        'debitor_iban': 'str',
        'debitor_bic': 'str',
        'amount': 'float',
        'purpose': 'str',
        'mandate_id': 'str',
        'mandate_date': 'str',
        'creditor_id': 'str',
        'end_to_end_id': 'str'
    }

    attribute_map = {
        'debitor_name': 'debitorName',
        'debitor_iban': 'debitorIban',
        'debitor_bic': 'debitorBic',
        'amount': 'amount',
        'purpose': 'purpose',
        'mandate_id': 'mandateId',
        'mandate_date': 'mandateDate',
        'creditor_id': 'creditorId',
        'end_to_end_id': 'endToEndId'
    }

    def __init__(self, debitor_name=None, debitor_iban=None, debitor_bic=None, amount=None, purpose=None, mandate_id=None, mandate_date=None, creditor_id=None, end_to_end_id=None):  # noqa: E501
        """SingleDirectDebitData - a model defined in Swagger"""  # noqa: E501

        self._debitor_name = None
        self._debitor_iban = None
        self._debitor_bic = None
        self._amount = None
        self._purpose = None
        self._mandate_id = None
        self._mandate_date = None
        self._creditor_id = None
        self._end_to_end_id = None
        self.discriminator = None

        self.debitor_name = debitor_name
        self.debitor_iban = debitor_iban
        if debitor_bic is not None:
            self.debitor_bic = debitor_bic
        self.amount = amount
        if purpose is not None:
            self.purpose = purpose
        self.mandate_id = mandate_id
        self.mandate_date = mandate_date
        if creditor_id is not None:
            self.creditor_id = creditor_id
        if end_to_end_id is not None:
            self.end_to_end_id = end_to_end_id

    @property
    def debitor_name(self):
        """Gets the debitor_name of this SingleDirectDebitData.  # noqa: E501

        Name of the debitor. Note: Neither finAPI nor the involved bank servers are guaranteed to validate the debitor name. Even if the debitor name does not depict the actual registered account holder of the specified debitor account, the direct debit request might still be successful.  # noqa: E501

        :return: The debitor_name of this SingleDirectDebitData.  # noqa: E501
        :rtype: str
        """
        return self._debitor_name

    @debitor_name.setter
    def debitor_name(self, debitor_name):
        """Sets the debitor_name of this SingleDirectDebitData.

        Name of the debitor. Note: Neither finAPI nor the involved bank servers are guaranteed to validate the debitor name. Even if the debitor name does not depict the actual registered account holder of the specified debitor account, the direct debit request might still be successful.  # noqa: E501

        :param debitor_name: The debitor_name of this SingleDirectDebitData.  # noqa: E501
        :type: str
        """
        if debitor_name is None:
            raise ValueError("Invalid value for `debitor_name`, must not be `None`")  # noqa: E501

        self._debitor_name = debitor_name

    @property
    def debitor_iban(self):
        """Gets the debitor_iban of this SingleDirectDebitData.  # noqa: E501

        IBAN of the debitor's account  # noqa: E501

        :return: The debitor_iban of this SingleDirectDebitData.  # noqa: E501
        :rtype: str
        """
        return self._debitor_iban

    @debitor_iban.setter
    def debitor_iban(self, debitor_iban):
        """Sets the debitor_iban of this SingleDirectDebitData.

        IBAN of the debitor's account  # noqa: E501

        :param debitor_iban: The debitor_iban of this SingleDirectDebitData.  # noqa: E501
        :type: str
        """
        if debitor_iban is None:
            raise ValueError("Invalid value for `debitor_iban`, must not be `None`")  # noqa: E501

        self._debitor_iban = debitor_iban

    @property
    def debitor_bic(self):
        """Gets the debitor_bic of this SingleDirectDebitData.  # noqa: E501

        BIC of the debitor's account. Note: This field is optional if - and only if - the bank connection of the account that you want to transfer money to supports the IBAN-Only direct debit. You can find this out via GET /bankConnections/<id>. Also note that when a BIC is given, then this BIC will be used for the direct debit request independent of whether it is required or not.  # noqa: E501

        :return: The debitor_bic of this SingleDirectDebitData.  # noqa: E501
        :rtype: str
        """
        return self._debitor_bic

    @debitor_bic.setter
    def debitor_bic(self, debitor_bic):
        """Sets the debitor_bic of this SingleDirectDebitData.

        BIC of the debitor's account. Note: This field is optional if - and only if - the bank connection of the account that you want to transfer money to supports the IBAN-Only direct debit. You can find this out via GET /bankConnections/<id>. Also note that when a BIC is given, then this BIC will be used for the direct debit request independent of whether it is required or not.  # noqa: E501

        :param debitor_bic: The debitor_bic of this SingleDirectDebitData.  # noqa: E501
        :type: str
        """

        self._debitor_bic = debitor_bic

    @property
    def amount(self):
        """Gets the amount of this SingleDirectDebitData.  # noqa: E501

        The amount to transfer. Must be a positive decimal number with at most two decimal places (e.g. 99.90)  # noqa: E501

        :return: The amount of this SingleDirectDebitData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SingleDirectDebitData.

        The amount to transfer. Must be a positive decimal number with at most two decimal places (e.g. 99.90)  # noqa: E501

        :param amount: The amount of this SingleDirectDebitData.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def purpose(self):
        """Gets the purpose of this SingleDirectDebitData.  # noqa: E501

        The purpose of the transfer transaction  # noqa: E501

        :return: The purpose of this SingleDirectDebitData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this SingleDirectDebitData.

        The purpose of the transfer transaction  # noqa: E501

        :param purpose: The purpose of this SingleDirectDebitData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def mandate_id(self):
        """Gets the mandate_id of this SingleDirectDebitData.  # noqa: E501

        Mandate ID that this direct debit order is based on.  # noqa: E501

        :return: The mandate_id of this SingleDirectDebitData.  # noqa: E501
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this SingleDirectDebitData.

        Mandate ID that this direct debit order is based on.  # noqa: E501

        :param mandate_id: The mandate_id of this SingleDirectDebitData.  # noqa: E501
        :type: str
        """
        if mandate_id is None:
            raise ValueError("Invalid value for `mandate_id`, must not be `None`")  # noqa: E501

        self._mandate_id = mandate_id

    @property
    def mandate_date(self):
        """Gets the mandate_date of this SingleDirectDebitData.  # noqa: E501

        Date of the mandate that this direct debit order is based on, in the format 'yyyy-MM-dd'  # noqa: E501

        :return: The mandate_date of this SingleDirectDebitData.  # noqa: E501
        :rtype: str
        """
        return self._mandate_date

    @mandate_date.setter
    def mandate_date(self, mandate_date):
        """Sets the mandate_date of this SingleDirectDebitData.

        Date of the mandate that this direct debit order is based on, in the format 'yyyy-MM-dd'  # noqa: E501

        :param mandate_date: The mandate_date of this SingleDirectDebitData.  # noqa: E501
        :type: str
        """
        if mandate_date is None:
            raise ValueError("Invalid value for `mandate_date`, must not be `None`")  # noqa: E501

        self._mandate_date = mandate_date

    @property
    def creditor_id(self):
        """Gets the creditor_id of this SingleDirectDebitData.  # noqa: E501

        Creditor ID of the source account's holder  # noqa: E501

        :return: The creditor_id of this SingleDirectDebitData.  # noqa: E501
        :rtype: str
        """
        return self._creditor_id

    @creditor_id.setter
    def creditor_id(self, creditor_id):
        """Sets the creditor_id of this SingleDirectDebitData.

        Creditor ID of the source account's holder  # noqa: E501

        :param creditor_id: The creditor_id of this SingleDirectDebitData.  # noqa: E501
        :type: str
        """

        self._creditor_id = creditor_id

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this SingleDirectDebitData.  # noqa: E501

        End-To-End ID for the transfer transaction  # noqa: E501

        :return: The end_to_end_id of this SingleDirectDebitData.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this SingleDirectDebitData.

        End-To-End ID for the transfer transaction  # noqa: E501

        :param end_to_end_id: The end_to_end_id of this SingleDirectDebitData.  # noqa: E501
        :type: str
        """

        self._end_to_end_id = end_to_end_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleDirectDebitData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
